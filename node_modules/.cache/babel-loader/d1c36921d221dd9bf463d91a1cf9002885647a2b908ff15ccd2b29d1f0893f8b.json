{"ast":null,"code":"var _jsxFileName = \"/Users/michaelkim/Documents/GitHub/tft-toolbox/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Board.css';\nimport Hexagon from './Hexagon';\nimport Champion from './Champion';\nimport DualButton from './DualButton';\nimport Traits from './Traits';\nimport Augments from './Augments';\nimport ChampionDisplay from './ChampionDisplay';\nimport { puzzlesList, Puzzles } from './Puzzles';\nimport { MOVEMENT_SPEED } from './ChampionsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CIRCLE_DIAMETER = 50;\nconst ITERATION_CYCLE = 50;\nvar globalIteration = 0;\nconst adjacentHexagons = {\n  0: {\n    0: [[0, 1], [1, 0]],\n    1: [[0, 0], [1, 0], [1, 1], [1, 2], [0, 2]],\n    2: [[0, 1], [1, 2], [0, 3]],\n    3: [[0, 2], [1, 2], [1, 3], [1, 4], [0, 4]],\n    4: [[0, 3], [1, 4], [0, 5]],\n    5: [[0, 4], [1, 4], [1, 5], [1, 6], [0, 6]],\n    6: [[0, 5], [1, 6], [0, 7]],\n    7: [[0, 6], [1, 6], [1, 7]]\n  },\n  1: {\n    0: [[0, 0], [0, 1], [1, 1], [2, 0]],\n    1: [[1, 0], [0, 1], [1, 2], [2, 2], [2, 1], [2, 0]],\n    2: [[0, 1], [0, 2], [0, 3], [1, 3], [2, 2], [1, 1]],\n    3: [[1, 2], [0, 3], [1, 4], [2, 4], [2, 3], [2, 2]],\n    4: [[0, 3], [0, 4], [0, 5], [1, 5], [2, 4], [1, 3]],\n    5: [[1, 4], [0, 5], [1, 6], [2, 6], [2, 5], [2, 4]],\n    6: [[0, 5], [0, 6], [0, 7], [1, 7], [2, 6], [1, 5]],\n    7: [[1, 6], [0, 7], [2, 6], [2, 7]]\n  },\n  2: {\n    0: [[1, 0], [1, 1], [2, 1], [3, 0]],\n    1: [[2, 0], [1, 1], [2, 2], [3, 2], [3, 1], [3, 0]],\n    2: [[1, 1], [1, 2], [1, 3], [2, 3], [3, 2], [2, 1]],\n    3: [[2, 2], [1, 3], [2, 4], [3, 4], [3, 3], [3, 2]],\n    4: [[1, 3], [1, 4], [1, 5], [2, 5], [3, 4], [2, 3]],\n    5: [[2, 4], [1, 5], [2, 6], [3, 6], [3, 5], [3, 4]],\n    6: [[1, 5], [1, 6], [1, 7], [2, 7], [3, 6], [2, 5]],\n    7: [[2, 6], [1, 7], [3, 6], [3, 7]]\n  },\n  3: {\n    0: [[2, 0], [2, 1], [3, 1], [4, 0]],\n    1: [[3, 0], [2, 1], [3, 2], [4, 2], [4, 1], [4, 0]],\n    2: [[2, 1], [2, 2], [2, 3], [3, 3], [4, 2], [3, 1]],\n    3: [[3, 2], [2, 3], [3, 4], [4, 4], [4, 3], [4, 2]],\n    4: [[2, 3], [2, 4], [2, 5], [3, 5], [4, 4], [3, 3]],\n    5: [[3, 4], [2, 5], [3, 6], [4, 6], [4, 5], [4, 4]],\n    6: [[2, 5], [2, 6], [2, 7], [3, 7], [4, 6], [3, 5]],\n    7: [[3, 6], [2, 7], [4, 6], [4, 7]]\n  },\n  4: {\n    0: [[3, 0], [3, 1], [4, 1], [5, 0]],\n    1: [[4, 0], [3, 1], [4, 2], [5, 2], [5, 1], [5, 0]],\n    2: [[3, 1], [3, 2], [3, 3], [4, 3], [5, 2], [4, 1]],\n    3: [[4, 2], [3, 3], [4, 4], [5, 4], [5, 3], [5, 2]],\n    4: [[3, 3], [3, 4], [3, 5], [4, 5], [5, 4], [4, 3]],\n    5: [[4, 4], [3, 5], [4, 6], [5, 6], [5, 5], [5, 4]],\n    6: [[3, 5], [3, 6], [3, 7], [4, 7], [5, 6], [4, 5]],\n    7: [[4, 6], [3, 7], [5, 6], [5, 7]]\n  },\n  5: {\n    0: [[4, 0], [4, 1], [5, 1], [6, 0]],\n    1: [[5, 0], [4, 1], [5, 2], [6, 2], [6, 1], [6, 0]],\n    2: [[4, 1], [4, 2], [4, 3], [5, 3], [6, 2], [5, 1]],\n    3: [[5, 2], [4, 3], [5, 4], [6, 4], [6, 3], [6, 2]],\n    4: [[4, 3], [4, 4], [4, 5], [5, 5], [6, 4], [5, 3]],\n    5: [[5, 4], [4, 5], [5, 6], [6, 6], [6, 5], [6, 4]],\n    6: [[4, 5], [4, 6], [4, 7], [5, 7], [6, 6], [5, 5]],\n    7: [[5, 6], [4, 7], [6, 6], [6, 7]]\n  },\n  6: {\n    0: [[5, 0], [5, 1], [6, 1]],\n    1: [[6, 0], [5, 1], [6, 2]],\n    2: [[6, 1], [5, 1], [5, 2], [5, 3], [6, 3]],\n    3: [[6, 2], [5, 3], [6, 4]],\n    4: [[6, 3], [5, 3], [5, 4], [5, 5], [6, 5]],\n    5: [[6, 4], [5, 5], [6, 6]],\n    6: [[6, 5], [5, 5], [5, 6], [5, 7], [6, 7]],\n    7: [[6, 6], [5, 7]]\n  }\n};\nfunction getNeighbors(champion) {\n  const left = champion.hexagonPosition.left;\n  const top = champion.hexagonPosition.top;\n  if (adjacentHexagons[left] && adjacentHexagons[left][top]) {\n    return adjacentHexagons[left][top];\n  }\n  return [];\n}\nfunction isAdjacent(champion1, champion2) {\n  const hex1 = [champion1.hexagonPosition.left, champion1.hexagonPosition.top];\n  const hex2 = [champion2.hexagonPosition.left, champion2.hexagonPosition.top];\n  const neighbors = getNeighbors({\n    hexagonPosition: {\n      left: hex1[0],\n      top: hex1[1]\n    }\n  });\n  return neighbors.some(neighbor => neighbor[0] === hex2[0] && neighbor[1] === hex2[1]);\n}\nfunction findShortestPath(champions, start, end, attackRange) {\n  const visited = new Set();\n  const queue = [[start]];\n  while (queue.length > 0) {\n    const path = queue.shift();\n    const currentHexagon = path[path.length - 1];\n    if (currentHexagon[0] !== undefined && currentHexagon[0] !== null) {\n      // if (isAdjacent({ hexagonPosition: { left: currentHexagon[0], top: currentHexagon[1] } }, end)) {\n      //   return path;\n      // }\n\n      if (!visited.has(currentHexagon.toString())) {\n        visited.add(currentHexagon.toString());\n        const neighbors = getNeighbors({\n          hexagonPosition: {\n            left: currentHexagon[0],\n            top: currentHexagon[1]\n          }\n        });\n        for (const neighbor of neighbors) {\n          const neighborStr = neighbor.toString();\n          const isChampionOccupied = champions.some(c => c.hexagonPosition.left === neighbor[0] && c.hexagonPosition.top === neighbor[1]);\n          if (!visited.has(neighborStr) && !isChampionOccupied) {\n            // Check attack range\n            if (attackRange === 1) {\n              if (isAdjacent({\n                hexagonPosition: {\n                  left: currentHexagon[0],\n                  top: currentHexagon[1]\n                }\n              }, end)) {\n                return path;\n              }\n            }\n            if (attackRange === 2) {\n              if (isAdjacent({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              }, end)) {\n                return path;\n              }\n            } else if (attackRange === 3) {\n              const neighborNeighbors = getNeighbors({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              });\n              if (neighborNeighbors.some(n => isAdjacent({\n                hexagonPosition: {\n                  left: n[0],\n                  top: n[1]\n                }\n              }, end))) {\n                return path;\n              }\n            } else if (attackRange === 4) {\n              const neighborNeighbors = getNeighbors({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              });\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({\n                  hexagonPosition: {\n                    left: n[0],\n                    top: n[1]\n                  }\n                }));\n              }\n              if (neighborNeighborNeighbors.some(n => isAdjacent({\n                hexagonPosition: {\n                  left: n[0],\n                  top: n[1]\n                }\n              }, end))) {\n                return path;\n              }\n            } else if (attackRange === 5) {\n              const neighborNeighbors = getNeighbors({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              });\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({\n                  hexagonPosition: {\n                    left: n[0],\n                    top: n[1]\n                  }\n                }));\n              }\n              const neighborNeighborNeighborNeighbors = [];\n              for (const n of neighborNeighborNeighbors) {\n                neighborNeighborNeighborNeighbors.push(...getNeighbors({\n                  hexagonPosition: {\n                    left: n[0],\n                    top: n[1]\n                  }\n                }));\n              }\n              if (neighborNeighborNeighborNeighbors.some(n => isAdjacent({\n                hexagonPosition: {\n                  left: n[0],\n                  top: n[1]\n                }\n              }, end))) {\n                return path;\n              }\n            }\n            const newPath = [...path, neighbor];\n            queue.push(newPath);\n          }\n        }\n      }\n    } else {\n      // if (isAdjacent(currentHexagon, end)) {\n      //   return path;\n      // }\n\n      if (!visited.has(currentHexagon.toString())) {\n        visited.add(currentHexagon.toString());\n        const neighbors = getNeighbors(currentHexagon);\n        for (const neighbor of neighbors) {\n          const neighborStr = neighbor.toString();\n          const isChampionOccupied = champions.some(c => c.hexagonPosition.left === neighbor[0] && c.hexagonPosition.top === neighbor[1]);\n          if (!visited.has(neighborStr) && !isChampionOccupied) {\n            // Check attack range\n            if (attackRange === 1) {\n              if (isAdjacent(currentHexagon, end)) {\n                return path;\n              }\n            }\n            if (attackRange === 2) {\n              if (isAdjacent({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              }, end)) {\n                return path;\n              }\n            } else if (attackRange === 3) {\n              const neighborNeighbors = getNeighbors({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              });\n              if (neighborNeighbors.some(n => isAdjacent({\n                hexagonPosition: {\n                  left: n[0],\n                  top: n[1]\n                }\n              }, end))) {\n                return path;\n              }\n            } else if (attackRange === 4) {\n              const neighborNeighbors = getNeighbors({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              });\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({\n                  hexagonPosition: {\n                    left: n[0],\n                    top: n[1]\n                  }\n                }));\n              }\n              if (neighborNeighborNeighbors.some(n => isAdjacent({\n                hexagonPosition: {\n                  left: n[0],\n                  top: n[1]\n                }\n              }, end))) {\n                return path;\n              }\n            } else if (attackRange === 5) {\n              const neighborNeighbors = getNeighbors({\n                hexagonPosition: {\n                  left: neighbor[0],\n                  top: neighbor[1]\n                }\n              });\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({\n                  hexagonPosition: {\n                    left: n[0],\n                    top: n[1]\n                  }\n                }));\n              }\n              const neighborNeighborNeighborNeighbors = [];\n              for (const n of neighborNeighborNeighbors) {\n                neighborNeighborNeighborNeighbors.push(...getNeighbors({\n                  hexagonPosition: {\n                    left: n[0],\n                    top: n[1]\n                  }\n                }));\n              }\n              if (neighborNeighborNeighborNeighbors.some(n => isAdjacent({\n                hexagonPosition: {\n                  left: n[0],\n                  top: n[1]\n                }\n              }, end))) {\n                return path;\n              }\n            }\n            const newPath = [...path, neighbor];\n            queue.push(newPath);\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\nfunction findClosestEnemy(userChampion, enemyChampions) {\n  let closestEnemy = null;\n  let minDistance = Infinity;\n  for (const enemyChampion of enemyChampions) {\n    const distance = findShortestPath(enemyChampions, {\n      hexagonPosition: {\n        left: userChampion.hexagonPosition.left,\n        top: userChampion.hexagonPosition.top\n      }\n    }, {\n      hexagonPosition: {\n        left: enemyChampion.hexagonPosition.left,\n        top: enemyChampion.hexagonPosition.top\n      }\n    }, userChampion.attackRange);\n    if (distance && distance.length < minDistance) {\n      minDistance = distance.length;\n      closestEnemy = enemyChampion;\n    }\n  }\n  return closestEnemy;\n}\nfunction Board({\n  enemyChampionsList,\n  userChampionsList,\n  initialPuzzleNumber\n}) {\n  _s();\n  const [isDragging, setDragging] = useState(false);\n  const [enemyChampions, setEnemyChampions] = useState(enemyChampionsList);\n  const [userChampions, setUserChampions] = useState(userChampionsList);\n  const [draggedPlayer, setDraggedPlayer] = useState(null);\n  const [dragStartIndex, setDragStartIndex] = useState(null);\n  const [isCombatActive, setCombatActive] = useState(0);\n  const [selectedChampion, setSelectedChampion] = useState(userChampionsList[0]);\n  const [puzzleNumber, setPuzzleNumber] = useState(initialPuzzleNumber);\n  const [enemyChampionsArchive, setEnemyChampionsArchive] = useState(enemyChampionsList);\n  const [userChampionsArchive, setUserChampionsArchive] = useState(userChampionsList);\n  // const [combatIteration, setCombatIteration] = useState(0); // will implement later for overtime\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n  const handleNextPuzzleClick = e => {\n    e.preventDefault();\n    setCombatActive(0);\n    let newPuzzleNumber;\n    do {\n      newPuzzleNumber = getRandomInt(puzzlesList.length);\n    } while (newPuzzleNumber === puzzleNumber);\n\n    // console.log('New Puzzle Number: ', puzzleNumber);\n\n    setPuzzleNumber(newPuzzleNumber);\n    const newChampions = Puzzles(newPuzzleNumber);\n    setEnemyChampions(newChampions[0]);\n    setUserChampions(newChampions[1]);\n    setSelectedChampion(newChampions[1][0]);\n  };\n  const startCombat = () => {\n    setCombatActive(1);\n  };\n  const endCombat = () => {\n    setCombatActive(2);\n    // console.log(\"combat ended\");\n  };\n  useEffect(() => {\n    if (isCombatActive === 1) {\n      const allChampions = userChampions.concat(enemyChampions);\n      // console.log('before champions', allChampions);\n\n      const updateChampionAtIndex = async index => {\n        // Make sure that selected champion is actually found for purposes of champion display (when champion dies, stop displaying)\n        var selectedChampionFound = false;\n        if (allChampions[index].team === selectedChampion.team && allChampions[index].index === selectedChampion.index) {\n          selectedChampionFound = true;\n        }\n\n        // Iterating through all stats after checking there are stats\n        var allChampionsStatIteration = 0;\n        const allStats = allChampions[index].stats;\n        if (allStats !== undefined && allStats !== null) {\n          for (const stat of allStats) {\n            // When the stat has no more iterations left, remove it from the list of stats\n            if (stat.iteration === 0) {\n              if (stat.type === 'dragonClaw') {\n                allChampions[index] = {\n                  ...allChampions[index],\n                  health: Math.round(allChampions[index].health + allChampions[index].originalHealth * 0.1)\n                };\n                allChampions[index].stats[allChampionsStatIteration] = {\n                  ...stat,\n                  iteration: 2 * MOVEMENT_SPEED\n                };\n              } else if (stat.type === 'archangelStaff') {\n                allChampions[index] = {\n                  ...allChampions[index],\n                  abilityPower: allChampions[index].abilityPower + 30\n                };\n                allChampions[index].stats[allChampionsStatIteration] = {\n                  ...stat,\n                  iteration: 5 * MOVEMENT_SPEED\n                };\n              } else {\n                // When stat has no iterations left, return back to base\n                if (stat.type === 'shred') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    magicResist: allChampions[index].originalMagicResist\n                  };\n                } else if (stat.type === 'sunder') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    armor: allChampions[index].originalArmor\n                  };\n                } else if (stat.type === 'shield') {\n                  // No clue how to get rid of each shield - tbd\n                } else if (stat.type === 'damageReduction') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    damageReduction: allChampions[index].damageReduction - stat.value\n                  };\n                } else if (stat.type === 'damageExtra') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    damageExtra: allChampions[index].damageExtra - stat.value\n                  };\n                } else if (stat.type === 'crownguard') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    abilityPower: allChampions[index].abilityPower + 35\n                  };\n                } else if (stat.type === 'guardbreaker') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    damageExtra: allChampions[index].damageExtra - stat.value,\n                    appliedGuardbreaker: false\n                  };\n                } else {\n                  // Throw an error if the stat is not implemented yet\n                  throw new Error('This is a stat that is not implemented yet.');\n                }\n                const newStats = allChampions[index].stats.filter((_, index) => index !== allChampionsStatIteration);\n                allChampions[index] = {\n                  ...allChampions[index],\n                  stats: newStats\n                };\n              }\n            } else {\n              // When stat still has iterations left, make sure that it is applied to the target stats\n              if (stat.type === 'shield') {\n                // Want to only apply each shield once\n                if (!stat.applied) {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    shield: Math.round(allChampions[index].originalHealth * stat.value)\n                  };\n                  allChampions[index].stats[allChampionsStatIteration] = {\n                    ...stat,\n                    applied: true,\n                    iteration: stat.iteration - 1\n                  };\n                  allChampionsStatIteration += 1;\n                }\n              } else if (stat.type === 'crownguard') {\n                if (!stat.applied) {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    shield: Math.round(allChampions[index].originalHealth * 0.3)\n                  };\n                  allChampions[index].stats[allChampionsStatIteration] = {\n                    ...stat,\n                    applied: true\n                  };\n                }\n                console.log(allChampions[index].stats[allChampionsStatIteration]);\n              } else if (stat.type === 'guardbreaker') {\n                if (!stat.applied) {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    damageExtra: allChampions[index].damageExtra + stat.value\n                  };\n                  allChampions[index].stats[allChampionsStatIteration] = {\n                    ...stat,\n                    applied: true\n                  };\n                }\n              } else if (stat.type === 'archangelStaff' || stat.type === 'dragonClaw') {\n                // Do nothing\n              } else {\n                if (stat.type === 'shred') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    magicResist: Math.round(allChampions[index].originalMagicResist * (1 - stat.value))\n                  };\n                } else if (stat.type === 'sunder') {\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    armor: Math.round(allChampions[index].originalArmor * (1 - stat.value))\n                  };\n                } else {\n                  // Throw an error if the stat is not implemented yet\n                  throw new Error('This is a stat that is not implemented yet.');\n                }\n              }\n\n              // else if (stat.type === 'damageReduction') {\n              //   if (!stat.applied) {\n              //     allChampions[index] = { ...allChampions[index], damageReduction: allChampions[index].damageReduction + stat.value };\n              //     allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true };\n              //   }\n\n              // } else if (stat.type === 'damageExtra') {\n              //   if (!stat.applied) {\n              //     allChampions[index] = { ...allChampions[index], damageExtra: allChampions[index].damageExtra + stat.value };\n              //     allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true };\n              //   }\n\n              // } \n\n              // Remove one iteration for this stat and move onto next stat\n              allChampions[index].stats[allChampionsStatIteration] = {\n                ...stat,\n                iteration: stat.iteration - 1\n              };\n              allChampionsStatIteration += 1;\n            }\n          }\n        }\n\n        // Iterating through all projectiles after checking there are projectiles\n        var allChampionsProjectileIteration = 0;\n        const allProjectiles = allChampions[index].projectiles;\n        if (allProjectiles !== undefined && allProjectiles !== null) {\n          for (const projectile of allProjectiles) {\n            if (projectile.iteration === 0) {\n              if (projectile.type === 'attack') {\n                // Calculate post-mitigation damage\n                const postMitigationAttackDamage = (1 - allChampions[index].armor / (100 + allChampions[index].armor)) * projectile.damage * (1 - allChampions[index].damageReduction) * (1 + projectile.damageExtra);\n\n                // Check if there are oncePerCombat items to check with health thresholds\n                if (allChampions[index].oncePerCombat.length > 0) {\n                  // Check if this damage will activate any oncePerCombat items\n                  const thresholdHealth = Math.round(allChampions[index].oncePerCombat.health * allChampions[index].originalHealth);\n                  var updatedOncePerCombatAttack = [];\n\n                  // Iterate through each item that is once-per-combat\n                  for (const item of allChampions[index].oncePerCombat) {\n                    if (thresholdHealth <= postMitigationAttackDamage) {\n                      // Iterate through the different one-time stat boosts that can happen\n                      for (const statBoost of item.type) {\n                        if (statBoost.type === 'armor') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            armor: allChampions[index].armor + statBoost.value\n                          };\n                        } else if (statBoost.type === 'magicResist') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            magicResist: allChampions[index].magicResist + statBoost.value\n                          };\n                        } else if (statBoost.type === 'originalHealth') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            originalHealth: allChampions[index].originalHealth + allChampions[index].originalHealth * statBoost.value,\n                            health: allChampions[index].health + allChampions[index].originalHealth * statBoost.value\n                          };\n                        } else if (statBoost.type === 'attackDamage') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            attackDamage: Math.round(allChampions[index].attackDamage + allChampions[index].attackDamage * statBoost.value)\n                          };\n                        } else if (statBoost.type === 'shield') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            stats: [...allChampions[index].stats, {\n                              type: 'shield',\n                              value: Math.round(statBoost.value * allChampions[index].originalHealth),\n                              iteration: 5 * MOVEMENT_SPEED,\n                              applied: true\n                            }]\n                          }; // Movement speed temporary as placeholder for one second\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            shield: allChampions[index].shield + Math.round(statBoost.value * allChampions[index].originalHealth)\n                          };\n                        } else {\n                          // Throw an error if the type is not implemented yet (later for untargetable on banshee's veil)\n                          throw new Error('This is a type of once-per-combat item that is not implemented yet.');\n                        }\n                      }\n                    } else {\n                      // Otherwise, if not activated, continue to keep in once-per-combat\n                      updatedOncePerCombatAttack = [...updatedOncePerCombatAttack, item];\n                    }\n                  }\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    updatedOncePerCombatAttack\n                  };\n\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAttackDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = {\n                      ...allChampions[index],\n                      alive: false,\n                      projectiles: newProjectiles\n                    };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    }\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAttackDamage} damage and died.`);\n                    break;\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAttackDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAttackDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAttackDamage);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        shield: newShield\n                      };\n\n                      // Account for guardbreaker\n                      if (projectile.attacker.team === 'user') {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = {\n                            ...allChampions[actualIndex],\n                            appliedGuardbreaker: true,\n                            stats: [...allChampions[actualIndex].stats, {\n                              type: 'guardbreaker',\n                              value: 0.25,\n                              iteration: 3 * MOVEMENT_SPEED\n                            }]\n                          };\n                        }\n                      } else {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = {\n                            ...allChampions[actualIndex],\n                            appliedGuardbreaker: true,\n                            stats: [...allChampions[actualIndex].stats, {\n                              type: 'guardbreaker',\n                              value: 0.25,\n                              iteration: 3 * MOVEMENT_SPEED\n                            }]\n                          };\n                        }\n                      }\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, 0.01 * projectile.damage + 0.07 * postMitigationAttackDamage);\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement));\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          }\n                        }\n                      }\n                    }\n\n                    // Find any stat effects from projectile (from attacks)\n                    if (projectile.hasOwnProperty('effect')) {\n                      for (const effect of projectile.effect) {\n                        if (effect.type === 'lastWhisper') {\n                          if (allChampions[index].armor < allChampions[index].originalArmor) {\n                            if (allChampions[index].armor + Math.round(allChampions[index].originalArmor * 0.3) <= allChampions[index].originalArmor) {\n                              allChampions[index].stats = [...allChampions[index].stats, {\n                                type: 'sunder',\n                                value: 0.3,\n                                iteration: 3 * MOVEMENT_SPEED\n                              }];\n                            }\n                          } else {\n                            allChampions[index].stats = [...allChampions[index].stats, {\n                              type: 'sunder',\n                              value: 0.3,\n                              iteration: 3 * MOVEMENT_SPEED\n                            }];\n                          }\n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        projectiles: newProjectiles\n                      };\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        mana: newCurrentMana,\n                        projectiles: newProjectiles\n                      };\n                    }\n                  }\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    oncePerCombat: []\n                  };\n                } else {\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAttackDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = {\n                      ...allChampions[index],\n                      alive: false,\n                      projectiles: newProjectiles\n                    };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    }\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAttackDamage} damage and died.`);\n                    break;\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAttackDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAttackDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAttackDamage);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        shield: newShield\n                      };\n\n                      // Account for guardbreaker\n                      if (projectile.attacker.team === 'user') {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = {\n                            ...allChampions[actualIndex],\n                            appliedGuardbreaker: true,\n                            stats: [...allChampions[actualIndex].stats, {\n                              type: 'guardbreaker',\n                              value: 0.25,\n                              iteration: 3 * MOVEMENT_SPEED\n                            }]\n                          };\n                        }\n                      } else {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = {\n                            ...allChampions[actualIndex],\n                            appliedGuardbreaker: true,\n                            stats: [...allChampions[actualIndex].stats, {\n                              type: 'guardbreaker',\n                              value: 0.25,\n                              iteration: 3 * MOVEMENT_SPEED\n                            }]\n                          };\n                        }\n                      }\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, 0.01 * projectile.damage + 0.07 * postMitigationAttackDamage);\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement));\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          }\n                        }\n                      }\n                    }\n\n                    // Find any stat effects from projectile (from attacks)\n                    if (projectile.hasOwnProperty('effect')) {\n                      for (const effect of projectile.effect) {\n                        if (effect.type === 'lastWhisper') {\n                          if (allChampions[index].armor < allChampions[index].originalArmor) {\n                            if (allChampions[index].armor + Math.round(allChampions[index].originalArmor * 0.3) <= allChampions[index].originalArmor) {\n                              allChampions[index].stats = [...allChampions[index].stats, {\n                                type: 'sunder',\n                                value: 0.3,\n                                iteration: 3 * MOVEMENT_SPEED\n                              }];\n                            }\n                          } else {\n                            allChampions[index].stats = [...allChampions[index].stats, {\n                              type: 'sunder',\n                              value: 0.3,\n                              iteration: 3 * MOVEMENT_SPEED\n                            }];\n                          }\n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        projectiles: newProjectiles\n                      };\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        mana: newCurrentMana,\n                        projectiles: newProjectiles\n                      };\n                    }\n                  }\n                }\n              } else if (projectile.type === 'ability') {\n                // Calculate post-mitigation damage\n                const postMitigationAbilityDamage = (1 - allChampions[index].magicResist / (100 + allChampions[index].magicResist)) * projectile.damage * (1 - allChampions[index].damageReduction) * (1 + projectile.damageExtra);\n\n                // Check if there are oncePerCombat items to check with health thresholds\n                if (allChampions[index].oncePerCombat.length > 0) {\n                  // Check if this damage will activate any oncePerCombat items\n                  const thresholdHealth = Math.round(allChampions[index].oncePerCombat.health * allChampions[index].originalHealth);\n                  var updatedOncePerCombatAbility = [];\n\n                  // Iterate through each item that is once-per-combat\n                  for (const item of allChampions[index].oncePerCombat) {\n                    if (thresholdHealth <= postMitigationAbilityDamage) {\n                      // Iterate through the different one-time stat boosts that can happen\n                      for (const statBoost of item.type) {\n                        if (statBoost.type === 'armor') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            armor: allChampions[index].armor + statBoost.value\n                          };\n                        } else if (statBoost.type === 'magicResist') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            magicResist: allChampions[index].magicResist + statBoost.value\n                          };\n                        } else if (statBoost.type === 'maxHealth') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            originalHealth: allChampions[index].originalHealth + statBoost.value,\n                            health: allChampions[index].health + statBoost.value\n                          };\n                        } else if (statBoost.type === 'attackDamage') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            attackDamage: Math.round(allChampions[index].attackDamage + allChampions[index].attackDamage * statBoost.value)\n                          };\n                        } else if (statBoost.type === 'shield') {\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            stats: [...allChampions[index].stats, {\n                              type: 'shield',\n                              value: Math.round(statBoost.value * allChampions[index].originalHealth),\n                              iteration: 5 * MOVEMENT_SPEED,\n                              applied: true\n                            }]\n                          }; // Movement speed temporary as placeholder for one second\n                          allChampions[index] = {\n                            ...allChampions[index],\n                            shield: allChampions[index].shield + Math.round(statBoost.value * allChampions[index].originalHealth)\n                          };\n                        } else {\n                          // Throw an error if the type is not implemented yet (later for untargetable on banshee's veil)\n                          throw new Error('This is a type of once-per-combat item that is not implemented yet.');\n                        }\n                      }\n                    } else {\n                      // Otherwise, if not activated, continue to keep in once-per-combat\n                      updatedOncePerCombatAbility = [...updatedOncePerCombatAbility, item];\n                    }\n                  }\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    updatedOncePerCombatAbility\n                  };\n\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAbilityDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = {\n                      ...allChampions[index],\n                      alive: false,\n                      projectiles: newProjectiles\n                    };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    }\n\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAbilityDamage} damage and died.`);\n                    break;\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAbilityDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAbilityDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAbilityDamage);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        shield: newShield\n                      };\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, 0.01 * projectile.damage + 0.07 * postMitigationAbilityDamage);\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement));\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          }\n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        projectiles: newProjectiles\n                      };\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        mana: newCurrentMana,\n                        projectiles: newProjectiles\n                      };\n                    }\n                  }\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    oncePerCombat: []\n                  };\n                } else {\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAbilityDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = {\n                      ...allChampions[index],\n                      alive: false,\n                      projectiles: newProjectiles\n                    };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = {\n                          ...allChampions[actualIndex],\n                          health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield))\n                        };\n                      }\n                    }\n\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAbilityDamage} damage and died.`);\n                    break;\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAbilityDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAbilityDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAbilityDamage);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        shield: newShield\n                      };\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, 0.01 * projectile.damage + 0.07 * postMitigationAbilityDamage);\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement));\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          }\n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        projectiles: newProjectiles\n                      };\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = {\n                        ...allChampions[index],\n                        health: newHealth,\n                        mana: newCurrentMana,\n                        projectiles: newProjectiles\n                      };\n                    }\n                  }\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    oncePerCombat: []\n                  };\n                }\n              } else if (projectile.type === 'item') {\n                // Throw an error if the projectile is not implemented yet (later for statik shiv, runaan's, etc.)\n                throw new Error('This is a projectile that is not implemented yet.');\n              } else {\n                // Throw an error if the projectile is not implemented yet\n                throw new Error('This is a projectile that is not implemented yet.');\n              }\n            } else {\n              // Remove one iteration for this projectile and move on to next projectile\n              allChampions[index].projectiles[allChampionsProjectileIteration] = {\n                ...projectile,\n                iteration: projectile.iteration - 1\n              };\n              allChampionsProjectileIteration += 1;\n            }\n          }\n        }\n\n        // Check for the champion being alive\n        if (allChampions[index].alive) {\n          // Find the closest enemy/user to the champion\n          const isUserChampion = allChampions[index].team === 'user';\n          const closestEnemy = isUserChampion ? findClosestEnemy(allChampions[index], enemyChampions) : findClosestEnemy(allChampions[index], userChampions);\n\n          // Check if a closest enemy exists\n          if (closestEnemy) {\n            const shortestPath = findShortestPath(allChampions, allChampions[index], closestEnemy, allChampions[index].attackRange);\n            // console.log('shortest path', shortestPath);\n\n            // Check if a shortest path exists\n            if (shortestPath && shortestPath.length > 1) {\n              const targetHexagon = shortestPath[1];\n              const targetPixelLeft = convertToPixels(targetHexagon[0], 'left', targetHexagon[1] % 2 === 1) - 25;\n              const targetPixelTop = convertToPixels(targetHexagon[1], 'top', targetHexagon[1] % 2 === 1) - 25;\n\n              // See if you need to move to get to the nearest enemy/user\n              if (allChampions[index].iterationsRemaining.move === 0) {\n                const newIterationsRemaining = {\n                  ...allChampions[index].iterationsRemaining,\n                  move: allChampions[index].movementSpeed\n                };\n                allChampions[index] = {\n                  ...allChampions[index],\n                  hexagonPosition: {\n                    left: targetHexagon[0],\n                    top: targetHexagon[1]\n                  },\n                  currentPosition: {\n                    left: targetPixelLeft,\n                    top: targetPixelTop\n                  },\n                  iterationsRemaining: newIterationsRemaining\n                };\n                // console.log(`${allChampions[index].type} of ${allChampions[index].team} moved.`);\n              } else {\n                const newIterationsRemaining = {\n                  ...allChampions[index].iterationsRemaining,\n                  move: allChampions[index].iterationsRemaining.move - 1\n                };\n                allChampions[index] = {\n                  ...allChampions[index],\n                  iterationsRemaining: newIterationsRemaining\n                };\n              }\n\n              // console.log('updated champion', allChampions[index]);\n            } else {\n              // Check if not at casting an ability yet\n              if (allChampions[index].totalMana === 0 | allChampions[index].mana < allChampions[index].totalMana) {\n                // If ready to cast an ability next\n                if (allChampions[index].iterationsRemaining.attack === 0) {\n                  // Check for based-on-target item enhancements\n                  var additionalAttackDamage = 0;\n                  if (allChampions[index].basedOnTarget.length > 0) {\n                    for (const item of allChampions[index].basedOnTarget) {\n                      if (item.type === 'giantSlayer') {\n                        if (closestEnemy.originalHealth > 1600) {\n                          additionalAttackDamage = 0.25;\n                        }\n                      }\n                    }\n                  }\n\n                  // Check for critical chance\n                  const randomValue = Math.random();\n                  var attackCriticalDamage = 0;\n                  if (randomValue < allChampions[index].criticalChance) {\n                    attackCriticalDamage = allChampions[index].criticalDamage;\n                  }\n\n                  // Check to apply status effect on attack hit\n                  var newProjectile = {\n                    type: 'attack',\n                    damage: allChampions[index].attackDamage + allChampions[index].attackDamage * attackCriticalDamage,\n                    damageExtra: allChampions[index].damageExtra + additionalAttackDamage,\n                    iteration: allChampions[index].attackProjectileSpeed,\n                    attacker: {\n                      specialIndex: allChampions[index].specialIndex,\n                      team: allChampions[index].specialIndex\n                    },\n                    effect: []\n                  };\n                  if (allChampions[index].statusEffectOnAttack.length > 0) {\n                    for (const item of allChampions[index].statusEffectOnAttack) {\n                      if (item.type === 'lastWhisper') {\n                        newProjectile = {\n                          ...newProjectile,\n                          effect: [...newProjectile.effect, item]\n                        };\n                      } else {\n                        throw new Error('This type of on-attack hit item status is not yet implemented.');\n                      }\n                    }\n                  }\n                  const newProjectileList = [...closestEnemy.projectiles, newProjectile];\n                  allChampions[closestEnemy.index] = {\n                    ...closestEnemy,\n                    projectiles: newProjectileList\n                  };\n\n                  // Check if there needs to be changes due to on-attack items\n                  if (allChampions[index].onAttackAbility.length > 0) {\n                    for (const item of allChampions[index].onAttackAbility) {\n                      if (item.type === 'mana') {\n                        allChampions[index] = {\n                          ...allChampions[index],\n                          mana: Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + item.value))\n                        };\n                      } else if (item.type === 'attackSpeed') {\n                        allChampions[index] = {\n                          ...allChampions[index],\n                          attackSpeed: Math.round(allChampions[index].attackSpeed - allChampions[index].attackSpeed * item.value)\n                        };\n                      } else {\n                        // Throw an error if the projectile is not implemented yet\n                        throw new Error('This type of on-attack item is not implemented yet.');\n                      }\n                    }\n                  }\n                  const newCurrentMana = Math.min(allChampions[index].totalMana, allChampions[index].mana + 10);\n                  const newIterationsRemaining = {\n                    ...allChampions[index].iterationsRemaining,\n                    attack: allChampions[index].attackSpeed\n                  };\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    mana: newCurrentMana,\n                    iterationsRemaining: newIterationsRemaining\n                  };\n                  // console.log(`${allChampions[index].type} of ${allChampions[index].team} fired an attack to ${closestEnemy.type}.`);\n                } else {\n                  // Reduce iterations until casting next attack by 1\n                  const newIterationsRemaining = {\n                    ...allChampions[index].iterationsRemaining,\n                    attack: allChampions[index].iterationsRemaining.attack - 1\n                  };\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    iterationsRemaining: newIterationsRemaining\n                  };\n                }\n              } else if (allChampions[index].mana >= allChampions[index].totalMana) {\n                // Check if ready to cast an ability\n                if (allChampions[index].iterationsRemaining.ability === 0) {\n                  // Check for based-on-target item enhancements\n                  var additionalAbilityDamage = 0;\n                  if (allChampions[index].basedOnTarget.length > 0) {\n                    for (const item of allChampions[index].basedOnTarget) {\n                      if (item.type === 'giantSlayer') {\n                        if (closestEnemy.originalHealth > 1600) {\n                          additionalAbilityDamage = 0.25;\n                        }\n                      }\n                    }\n                  }\n\n                  // Check for critical chance on abilities\n                  const randomValue = Math.random();\n                  var abilityCriticalDamage = 0;\n                  if (randomValue < allChampions[index].criticalChance && allChampions[index].abilityCrit) {\n                    abilityCriticalDamage = allChampions[index].criticalDamage;\n                  }\n                  const newProjectile = {\n                    type: 'ability',\n                    damage: allChampions[index].abilityPower + allChampions[index].abilityPower * abilityCriticalDamage,\n                    damageExtra: allChampions[index].damageExtra + additionalAbilityDamage,\n                    iteration: allChampions[index].abilityProjectileSpeed,\n                    attacker: {\n                      specialIndex: allChampions[index].specialIndex,\n                      team: allChampions[index].specialIndex\n                    },\n                    effect: []\n                  };\n                  const newProjectileList = [...closestEnemy.projectiles, newProjectile];\n                  allChampions[closestEnemy.index] = {\n                    ...closestEnemy,\n                    projectiles: newProjectileList\n                  };\n                  const newIterationsRemaining = {\n                    ...allChampions[index].iterationsRemaining,\n                    ability: allChampions[index].abilityCastTime\n                  };\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    mana: 0,\n                    iterationsRemaining: newIterationsRemaining\n                  };\n                  // console.log(`${allChampions[index].type} of ${allChampions[index].team} fired an ability to ${closestEnemy.type}.`);\n                } else {\n                  // Reduce iterations until casting next ability by 1\n                  const newIterationsRemaining = {\n                    ...allChampions[index].iterationsRemaining,\n                    ability: allChampions[index].iterationsRemaining.ability - 1\n                  };\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    iterationsRemaining: newIterationsRemaining\n                  };\n                }\n              }\n            }\n          }\n        }\n        return selectedChampionFound && allChampions[index].alive;\n      };\n      const updateChampionsSequentially = async startTime => {\n        var selectedChampionCompleted = false;\n        for (let index = 0; index < allChampions.length; index++) {\n          const selectedChampionFound = await updateChampionAtIndex(index);\n          if (selectedChampionFound) {\n            setSelectedChampion(allChampions[index]);\n            selectedChampionCompleted = true;\n          }\n        }\n\n        // console.log('after champions', allChampions);\n\n        var userChampionsArchive = [];\n        var enemyChampionsArchive = [];\n        allChampions.forEach(champion => {\n          if (champion.team === 'user') {\n            userChampionsArchive.push(champion);\n          } else {\n            enemyChampionsArchive.push(champion);\n          }\n        });\n        const aliveChampions = allChampions.filter(x => x.alive);\n        var updatedUserChampions = [];\n        var updatedEnemyChampions = [];\n        var iteration = 0;\n        aliveChampions.forEach(champion => {\n          if (champion.team === 'user') {\n            champion = {\n              ...champion,\n              index: iteration\n            };\n            updatedUserChampions.push(champion);\n            userChampionsArchive[champion.specialIndex] = champion;\n            if (!selectedChampionCompleted) {\n              setSelectedChampion(champion);\n              selectedChampionCompleted = true;\n            }\n          } else {\n            champion = {\n              ...champion,\n              index: iteration\n            };\n            updatedEnemyChampions.push(champion);\n            enemyChampionsArchive[champion.specialIndex] = champion;\n            if (!selectedChampionCompleted) {\n              setSelectedChampion(champion);\n              selectedChampionCompleted = true;\n            }\n          }\n          iteration += 1;\n        });\n        const endTime = new Date();\n        const timeDifference = endTime - startTime;\n        const waitTime = ITERATION_CYCLE - timeDifference;\n        if (waitTime >= 0) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));\n          // console.log(`${globalIteration} Complete w/ ${waitTime + timeDifference} ms.`);\n        } else {\n          console.log('ERROR! ITERATION CYCLE TIME NOT LONG ENOUGH!');\n        }\n        setUserChampions(updatedUserChampions);\n        setEnemyChampions(updatedEnemyChampions);\n        setUserChampionsArchive(userChampionsArchive);\n        setEnemyChampionsArchive(enemyChampionsArchive);\n        if (updatedUserChampions.length === 0) {\n          endCombat();\n        } else if (updatedEnemyChampions.length === 0) {\n          endCombat();\n        }\n      };\n      const startTime = new Date();\n      updateChampionsSequentially(startTime);\n      globalIteration += 1;\n    }\n  }, [userChampions, isCombatActive, enemyChampions]);\n  const areChampionsOverlapping = (champion1, champion2) => {\n    const dx = champion1.currentPosition.left - champion2.currentPosition.left;\n    const dy = champion1.currentPosition.top - champion2.currentPosition.top;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < CIRCLE_DIAMETER;\n  };\n  const handleCircleDragStart = (event, player, index) => {\n    if (player === 'enemy') {\n      event.preventDefault(); // prevent dragging for enemy circles\n      return;\n    }\n    event.dataTransfer.setData('text/plain', 'champion');\n    setDragging(true);\n    setDraggedPlayer(player);\n    setDragStartIndex(index);\n  };\n  const handleCircleDragEnd = () => {\n    setDragging(false);\n    setDraggedPlayer(null);\n    setDragStartIndex(null);\n  };\n  const handleDragOver = event => {\n    event.dataTransfer.effectAllowed = 'none';\n    event.preventDefault();\n  };\n  const convertToPixels = (coordinate, leftOrTop, even) => {\n    if (leftOrTop === 'left') {\n      if (even) {\n        return 459.75 + 32.7 + (coordinate + 1) * 2.95 + coordinate * 62.4 + 62.4 / 2;\n      }\n      return 459.75 + (coordinate + 1) * 2.95 + coordinate * 62.4 + 62.4 / 2;\n    }\n    if (leftOrTop === 'top') {\n      return coordinate * 20.3 + coordinate * 36 + 36 + 158.11;\n    }\n  };\n  const convertToHexagons = (coordinate, leftOrTop, even) => {\n    if (leftOrTop === 'left') {\n      if (even) {\n        return Math.floor((coordinate - 32.7 - 459.75 - 2.95 - 31.2) / (2.95 + 62.4));\n      }\n      return Math.floor((coordinate - 2.95 - 31.2 - 459.75) / (2.95 + 62.4));\n    }\n    if (leftOrTop === 'top') {\n      return Math.floor((coordinate - 36 - 158.11) / (20.3 + 36));\n    }\n  };\n  const handleDrop = (event, hexagonCoordinates, player) => {\n    event.preventDefault();\n    if (draggedPlayer === 'enemy') {\n      return;\n    }\n    if (isCombatActive !== 0) {\n      event.preventDefault();\n      return;\n    }\n    if (player === 'user' && dragStartIndex !== null) {\n      const hexagonCenterX = convertToPixels(hexagonCoordinates.left, 'left', hexagonCoordinates.top % 2 === 1);\n      const hexagonCenterY = convertToPixels(hexagonCoordinates.top, 'top', hexagonCoordinates.top % 2 === 1);\n      const targetHexagon = {\n        currentPosition: {\n          left: hexagonCenterX - CIRCLE_DIAMETER / 2,\n          top: hexagonCenterY - CIRCLE_DIAMETER / 2\n        }\n      };\n      const overlappingIndex = userChampions.findIndex((champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetHexagon));\n      const enemyOverlappingIndex = enemyChampions.findIndex((champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetHexagon));\n      if (enemyOverlappingIndex === -1) {\n        if (overlappingIndex !== -1) {\n          setUserChampions(prevUserChampions => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[overlappingIndex] = {\n              ...prevUserChampions[overlappingIndex],\n              hexagonPosition: {\n                left: prevUserChampions[dragStartIndex].hexagonPosition.left,\n                top: prevUserChampions[dragStartIndex].hexagonPosition.top\n              },\n              currentPosition: {\n                left: prevUserChampions[dragStartIndex].currentPosition.left,\n                top: prevUserChampions[dragStartIndex].currentPosition.top\n              }\n            };\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: {\n                left: hexagonCoordinates.left,\n                top: hexagonCoordinates.top\n              },\n              currentPosition: {\n                left: targetHexagon.currentPosition.left,\n                top: targetHexagon.currentPosition.top\n              }\n            };\n            return updatedUserChampions;\n          });\n        } else {\n          setUserChampions(prevUserChampions => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: {\n                left: hexagonCoordinates.left,\n                top: hexagonCoordinates.top\n              },\n              currentPosition: {\n                left: targetHexagon.currentPosition.left,\n                top: targetHexagon.currentPosition.top\n              },\n              image: updatedUserChampions[dragStartIndex].image\n            };\n            return updatedUserChampions;\n          });\n        }\n      }\n    }\n  };\n  const handleCircleDrop = (event, circleCoordinates, index) => {\n    event.preventDefault();\n    if (draggedPlayer === 'enemy') {\n      return;\n    }\n    if (isCombatActive !== 0) {\n      event.preventDefault();\n      return;\n    }\n    if (circleCoordinates.top >= 398.31 && dragStartIndex !== null) {\n      const targetChampion = {\n        currentPosition: {\n          left: circleCoordinates.left,\n          top: circleCoordinates.top\n        }\n      };\n      const overlappingIndex = userChampions.findIndex((champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetChampion));\n      const enemyOverlappingIndex = enemyChampions.findIndex((champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetChampion));\n      if (enemyOverlappingIndex === -1) {\n        if (overlappingIndex !== -1) {\n          setUserChampions(prevUserChampions => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[overlappingIndex] = {\n              ...prevUserChampions[overlappingIndex],\n              hexagonPosition: {\n                left: prevUserChampions[dragStartIndex].hexagonPosition.left,\n                top: prevUserChampions[dragStartIndex].hexagonPosition.top\n              },\n              currentPosition: {\n                left: prevUserChampions[dragStartIndex].currentPosition.left,\n                top: prevUserChampions[dragStartIndex].currentPosition.top\n              }\n            };\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: {\n                left: prevUserChampions[index].hexagonPosition.left,\n                top: prevUserChampions[index].hexagonPosition.top\n              },\n              currentPosition: {\n                left: targetChampion.currentPosition.left,\n                top: targetChampion.currentPosition.top\n              }\n            };\n            return updatedUserChampions;\n          });\n        } else {\n          setUserChampions(prevUserChampions => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: {\n                left: prevUserChampions[index].hexagonPosition.left,\n                top: prevUserChampions[index].hexagonPosition.top\n              },\n              currentPosition: {\n                left: targetChampion.currentPosition.left,\n                top: targetChampion.currentPosition.top\n              },\n              image: updatedUserChampions[dragStartIndex].image\n            };\n            return updatedUserChampions;\n          });\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      height: '90vh',\n      width: '100vw',\n      backgroundColor: '#13293D',\n      alignItems: 'center',\n      justifyContent: 'center'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'row',\n        width: '100%',\n        height: '95%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section left-section\",\n        children: [/*#__PURE__*/_jsxDEV(DualButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1320,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            flex: 1,\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(Traits, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1322,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Augments, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section center-section\",\n        children: [isCombatActive === 2 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay\",\n          children: [userChampions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-message win\",\n            children: \"You Win!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1330,\n            columnNumber: 17\n          }, this), enemyChampions.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"result-message lose\",\n            children: \"You Lose!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1335,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1328,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row\",\n          children: [enemyChampions.map((champion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `circle-overlay ${isDragging && draggedPlayer === 'enemy' ? 'dragging' : ''}`,\n            style: {\n              left: champion.currentPosition.left + 'px',\n              top: champion.currentPosition.top + 'px'\n            },\n            draggable: true,\n            onDragStart: e => handleCircleDragStart(e, 'enemy', index),\n            onDragEnd: handleCircleDragEnd,\n            onDragOver: e => handleDragOver(e),\n            onDrop: e => handleCircleDrop(e, {\n              left: champion.currentPosition.left,\n              top: champion.currentPosition.top\n            }, index),\n            onClick: () => setSelectedChampion(champion),\n            children: /*#__PURE__*/_jsxDEV(Champion, {\n              team: 'enemy',\n              index: champion.index,\n              hexagonPosition: champion.hexagonPosition,\n              currentPosition: champion.currentPosition,\n              image: champion.image,\n              type: champion.type,\n              starLevel: champion.starLevel,\n              headliner: champion.headliner,\n              items: champion.items,\n              alive: champion.alive,\n              attackRange: champion.attackRange,\n              health: champion.health,\n              originalHealth: champion.originalHealth,\n              attackDamage: champion.attackDamage,\n              totalMana: champion.totalMana,\n              mana: champion.mana,\n              abilityPower: champion.abilityPower,\n              armor: champion.armor,\n              magicResist: champion.magicResist,\n              castingAttack: champion.castingAttack,\n              castingAbility: champion.castingAbility,\n              projectiles: champion.projectiles,\n              abilityCastTime: champion.abilityCastTime,\n              movementSpeed: champion.movementSpeed,\n              iterationsRemaining: champion.iterationsRemaining,\n              attackProjectileSpeed: champion.attackProjectileSpeed,\n              abilityProjectileSpeed: champion.abilityProjectileSpeed\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1354,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1343,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1386,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1387,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1388,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1389,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 0,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 0,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1392,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1341,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row even\",\n          children: [/*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1395,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1396,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1397,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1398,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1400,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 1,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 1,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1401,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row\",\n          children: [/*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1404,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1405,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1406,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1407,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1409,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 2,\n              even: 0\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 2,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1403,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row even\",\n          children: [/*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1413,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1414,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1415,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1416,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1417,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1418,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"enemy\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 3,\n              even: 32.7\n            }, 'enemy'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 3,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1419,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1412,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row\",\n          children: [/*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1422,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1423,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1424,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1425,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1426,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1427,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 4,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 4,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1428,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1421,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row even\",\n          children: [/*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1431,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1432,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1433,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1434,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1435,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1436,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 5,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 5,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1437,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row\",\n          children: [/*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1440,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1441,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1442,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1445,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 6,\n              even: 0\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 6,\n              even: 0\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1446,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1439,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"hex-row even\",\n          children: [userChampions.map((champion, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `circle-overlay ${isDragging && draggedPlayer === 'user' ? 'dragging' : ''}`,\n            style: {\n              left: champion.currentPosition.left + 'px',\n              top: champion.currentPosition.top + 'px'\n            },\n            draggable: true,\n            onDragStart: e => handleCircleDragStart(e, 'user', index),\n            onDragEnd: handleCircleDragEnd,\n            onDragOver: e => handleDragOver(e),\n            onDrop: e => handleCircleDrop(e, {\n              left: champion.currentPosition.left,\n              top: champion.currentPosition.top\n            }, index),\n            onClick: () => setSelectedChampion(champion),\n            children: /*#__PURE__*/_jsxDEV(Champion, {\n              team: 'user',\n              index: champion.index,\n              hexagonPosition: champion.hexagonPosition,\n              currentPosition: champion.currentPosition,\n              image: champion.image,\n              type: champion.type,\n              starLevel: champion.starLevel,\n              headliner: champion.headliner,\n              items: champion.items,\n              alive: champion.alive,\n              attackRange: champion.attackRange,\n              health: champion.health,\n              originalHealth: champion.originalHealth,\n              attackDamage: champion.attackDamage,\n              totalMana: champion.totalMana,\n              mana: champion.mana,\n              abilityPower: champion.abilityPower,\n              armor: champion.armor,\n              magicResist: champion.magicResist,\n              castingAttack: champion.castingAttack,\n              castingAbility: champion.castingAbility,\n              projectiles: champion.projectiles,\n              abilityCastTime: champion.abilityCastTime,\n              movementSpeed: champion.movementSpeed,\n              iterationsRemaining: champion.iterationsRemaining,\n              attackProjectileSpeed: champion.attackProjectileSpeed,\n              abilityProjectileSpeed: champion.abilityProjectileSpeed\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1461,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1450,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 0,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 0,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1493,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 1,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 1,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1494,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 2,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 2,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1495,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 3,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 3,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1496,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 4,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 4,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1497,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 5,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 5,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1498,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Hexagon, {\n            player: \"user\",\n            onDragOver: handleDragOver,\n            onDrop: e => handleDrop(e, {\n              left: 6,\n              top: 7,\n              even: 32.7\n            }, 'user'),\n            hexagonCoordinates: {\n              left: 6,\n              top: 7,\n              even: 32.7\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1499,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1448,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section right-section\",\n        children: [/*#__PURE__*/_jsxDEV(ChampionDisplay, {\n          champion: selectedChampion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1503,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            width: '225px',\n            height: '50px',\n            marginBottom: '10px'\n          },\n          children: [isCombatActive !== 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              flex: '1',\n              padding: '10px',\n              borderRadius: '15px',\n              backgroundColor: isCombatActive !== 0 ? '#ccc' : '#4CAF50',\n              color: '#ffffff',\n              fontSize: '16px',\n              fontWeight: 'bold'\n            },\n            disabled: isCombatActive !== 0,\n            onClick: startCombat,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1506,\n            columnNumber: 15\n          }, this), isCombatActive === 2 && /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              flex: '1',\n              padding: '10px',\n              borderRadius: '15px',\n              backgroundColor: '#4CAF50',\n              color: '#ffffff',\n              fontSize: '16px',\n              fontWeight: 'bold'\n            },\n            disabled: isCombatActive === 1,\n            onClick: handleNextPuzzleClick,\n            children: \"Next Puzzle\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1523,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 1502,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '100%',\n        height: '5%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1542,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1317,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"L+MNR/xOOK9djTQepKGCEdKFyW8=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","useEffect","Hexagon","Champion","DualButton","Traits","Augments","ChampionDisplay","puzzlesList","Puzzles","MOVEMENT_SPEED","jsxDEV","_jsxDEV","CIRCLE_DIAMETER","ITERATION_CYCLE","globalIteration","adjacentHexagons","getNeighbors","champion","left","hexagonPosition","top","isAdjacent","champion1","champion2","hex1","hex2","neighbors","some","neighbor","findShortestPath","champions","start","end","attackRange","visited","Set","queue","length","path","shift","currentHexagon","undefined","has","toString","add","neighborStr","isChampionOccupied","c","neighborNeighbors","n","neighborNeighborNeighbors","push","neighborNeighborNeighborNeighbors","newPath","findClosestEnemy","userChampion","enemyChampions","closestEnemy","minDistance","Infinity","enemyChampion","distance","Board","enemyChampionsList","userChampionsList","initialPuzzleNumber","_s","isDragging","setDragging","setEnemyChampions","userChampions","setUserChampions","draggedPlayer","setDraggedPlayer","dragStartIndex","setDragStartIndex","isCombatActive","setCombatActive","selectedChampion","setSelectedChampion","puzzleNumber","setPuzzleNumber","enemyChampionsArchive","setEnemyChampionsArchive","userChampionsArchive","setUserChampionsArchive","getRandomInt","max","Math","floor","random","handleNextPuzzleClick","e","preventDefault","newPuzzleNumber","newChampions","startCombat","endCombat","allChampions","concat","updateChampionAtIndex","index","selectedChampionFound","team","allChampionsStatIteration","allStats","stats","stat","iteration","type","health","round","originalHealth","abilityPower","magicResist","originalMagicResist","armor","originalArmor","damageReduction","value","damageExtra","appliedGuardbreaker","Error","newStats","filter","_","applied","shield","console","log","allChampionsProjectileIteration","allProjectiles","projectiles","projectile","postMitigationAttackDamage","damage","oncePerCombat","thresholdHealth","updatedOncePerCombatAttack","item","statBoost","attackDamage","newProjectiles","alive","attacker","actualIndex","specialIndex","omnivamp","shieldDifference","newShield","onShieldAttackProcItem","newHealth","manaIncrement","min","newCurrentMana","totalMana","mana","constantThreshold","baseState","hasOwnProperty","effect","postMitigationAbilityDamage","updatedOncePerCombatAbility","isUserChampion","shortestPath","targetHexagon","targetPixelLeft","convertToPixels","targetPixelTop","iterationsRemaining","move","newIterationsRemaining","movementSpeed","currentPosition","attack","additionalAttackDamage","basedOnTarget","randomValue","attackCriticalDamage","criticalChance","criticalDamage","newProjectile","attackProjectileSpeed","statusEffectOnAttack","newProjectileList","onAttackAbility","attackSpeed","ability","additionalAbilityDamage","abilityCriticalDamage","abilityCrit","abilityProjectileSpeed","abilityCastTime","updateChampionsSequentially","startTime","selectedChampionCompleted","forEach","aliveChampions","x","updatedUserChampions","updatedEnemyChampions","endTime","Date","timeDifference","waitTime","Promise","resolve","setTimeout","areChampionsOverlapping","dx","dy","sqrt","handleCircleDragStart","event","player","dataTransfer","setData","handleCircleDragEnd","handleDragOver","effectAllowed","coordinate","leftOrTop","even","convertToHexagons","handleDrop","hexagonCoordinates","hexagonCenterX","hexagonCenterY","overlappingIndex","findIndex","enemyOverlappingIndex","prevUserChampions","image","handleCircleDrop","circleCoordinates","targetChampion","style","display","flexDirection","height","width","backgroundColor","alignItems","justifyContent","children","className","fileName","_jsxFileName","lineNumber","columnNumber","flex","map","draggable","onDragStart","onDragEnd","onDragOver","onDrop","onClick","starLevel","headliner","items","castingAttack","castingAbility","marginBottom","padding","borderRadius","color","fontSize","fontWeight","disabled","_c","$RefreshReg$"],"sources":["/Users/michaelkim/Documents/GitHub/tft-toolbox/src/Board.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './Board.css';\nimport Hexagon from './Hexagon';\nimport Champion from './Champion';\nimport DualButton from './DualButton';\nimport Traits from './Traits';\nimport Augments from './Augments';\nimport ChampionDisplay from './ChampionDisplay';\nimport { puzzlesList, Puzzles } from './Puzzles';\nimport { MOVEMENT_SPEED } from './ChampionsList';\n\nconst CIRCLE_DIAMETER = 50;\nconst ITERATION_CYCLE = 50;\nvar globalIteration = 0;\n\nconst adjacentHexagons = {\n  0: { \n    0: [[0, 1], [1, 0]],\n    1: [[0, 0], [1, 0], [1, 1], [1, 2], [0, 2]],\n    2: [[0, 1], [1, 2], [0, 3]],\n    3: [[0, 2], [1, 2], [1, 3], [1, 4], [0, 4]],\n    4: [[0, 3], [1, 4], [0, 5]],\n    5: [[0, 4], [1, 4], [1, 5], [1, 6], [0, 6]],\n    6: [[0, 5], [1, 6], [0, 7]],\n    7: [[0, 6], [1, 6], [1, 7]],\n  },\n  1: { \n    0: [[0, 0], [0, 1], [1, 1], [2, 0]],\n    1: [[1, 0], [0, 1], [1, 2], [2, 2], [2, 1], [2, 0]],\n    2: [[0, 1], [0, 2], [0, 3], [1, 3], [2, 2], [1, 1]],\n    3: [[1, 2], [0, 3], [1, 4], [2, 4], [2, 3], [2, 2]],\n    4: [[0, 3], [0, 4], [0, 5], [1, 5], [2, 4], [1, 3]],\n    5: [[1, 4], [0, 5], [1, 6], [2, 6], [2, 5], [2, 4]],\n    6: [[0, 5], [0, 6], [0, 7], [1, 7], [2, 6], [1, 5]],\n    7: [[1, 6], [0, 7], [2, 6], [2, 7]],\n  },\n  2: { \n    0: [[1, 0], [1, 1], [2, 1], [3, 0]],\n    1: [[2, 0], [1, 1], [2, 2], [3, 2], [3, 1], [3, 0]],\n    2: [[1, 1], [1, 2], [1, 3], [2, 3], [3, 2], [2, 1]],\n    3: [[2, 2], [1, 3], [2, 4], [3, 4], [3, 3], [3, 2]],\n    4: [[1, 3], [1, 4], [1, 5], [2, 5], [3, 4], [2, 3]],\n    5: [[2, 4], [1, 5], [2, 6], [3, 6], [3, 5], [3, 4]],\n    6: [[1, 5], [1, 6], [1, 7], [2, 7], [3, 6], [2, 5]],\n    7: [[2, 6], [1, 7], [3, 6], [3, 7]],\n  },\n  3: { \n    0: [[2, 0], [2, 1], [3, 1], [4, 0]],\n    1: [[3, 0], [2, 1], [3, 2], [4, 2], [4, 1], [4, 0]],\n    2: [[2, 1], [2, 2], [2, 3], [3, 3], [4, 2], [3, 1]],\n    3: [[3, 2], [2, 3], [3, 4], [4, 4], [4, 3], [4, 2]],\n    4: [[2, 3], [2, 4], [2, 5], [3, 5], [4, 4], [3, 3]],\n    5: [[3, 4], [2, 5], [3, 6], [4, 6], [4, 5], [4, 4]],\n    6: [[2, 5], [2, 6], [2, 7], [3, 7], [4, 6], [3, 5]],\n    7: [[3, 6], [2, 7], [4, 6], [4, 7]],\n  },\n  4: { \n    0: [[3, 0], [3, 1], [4, 1], [5, 0]],\n    1: [[4, 0], [3, 1], [4, 2], [5, 2], [5, 1], [5, 0]],\n    2: [[3, 1], [3, 2], [3, 3], [4, 3], [5, 2], [4, 1]],\n    3: [[4, 2], [3, 3], [4, 4], [5, 4], [5, 3], [5, 2]],\n    4: [[3, 3], [3, 4], [3, 5], [4, 5], [5, 4], [4, 3]],\n    5: [[4, 4], [3, 5], [4, 6], [5, 6], [5, 5], [5, 4]],\n    6: [[3, 5], [3, 6], [3, 7], [4, 7], [5, 6], [4, 5]],\n    7: [[4, 6], [3, 7], [5, 6], [5, 7]],\n  },\n  5: { \n    0: [[4, 0], [4, 1], [5, 1], [6, 0]],\n    1: [[5, 0], [4, 1], [5, 2], [6, 2], [6, 1], [6, 0]],\n    2: [[4, 1], [4, 2], [4, 3], [5, 3], [6, 2], [5, 1]],\n    3: [[5, 2], [4, 3], [5, 4], [6, 4], [6, 3], [6, 2]],\n    4: [[4, 3], [4, 4], [4, 5], [5, 5], [6, 4], [5, 3]],\n    5: [[5, 4], [4, 5], [5, 6], [6, 6], [6, 5], [6, 4]],\n    6: [[4, 5], [4, 6], [4, 7], [5, 7], [6, 6], [5, 5]],\n    7: [[5, 6], [4, 7], [6, 6], [6, 7]],\n  },\n  6: { \n    0: [[5, 0], [5, 1], [6, 1]],\n    1: [[6, 0], [5, 1], [6, 2]],\n    2: [[6, 1], [5, 1], [5, 2], [5, 3], [6, 3]],\n    3: [[6, 2], [5, 3], [6, 4]],\n    4: [[6, 3], [5, 3], [5, 4], [5, 5], [6, 5]],\n    5: [[6, 4], [5, 5], [6, 6]],\n    6: [[6, 5], [5, 5], [5, 6], [5, 7], [6, 7]],\n    7: [[6, 6], [5, 7]],\n  },\n}\n\nfunction getNeighbors(champion) {\n  const left = champion.hexagonPosition.left;\n  const top = champion.hexagonPosition.top;\n  if (adjacentHexagons[left] && adjacentHexagons[left][top]) {\n    return adjacentHexagons[left][top];\n  }\n\n  return [];\n}\n\nfunction isAdjacent(champion1, champion2) {\n  const hex1 = [champion1.hexagonPosition.left, champion1.hexagonPosition.top];\n  const hex2 = [champion2.hexagonPosition.left, champion2.hexagonPosition.top];\n  const neighbors = getNeighbors({ hexagonPosition: { left: hex1[0], top: hex1[1] } });\n  \n  return neighbors.some(neighbor => neighbor[0] === hex2[0] && neighbor[1] === hex2[1]);\n}\n\nfunction findShortestPath(champions, start, end, attackRange) {\n  const visited = new Set();\n  const queue = [[start]];\n  \n  while (queue.length > 0) {\n    const path = queue.shift();\n    const currentHexagon = path[path.length - 1];\n\n    if (currentHexagon[0] !== undefined && currentHexagon[0] !== null) {\n      // if (isAdjacent({ hexagonPosition: { left: currentHexagon[0], top: currentHexagon[1] } }, end)) {\n      //   return path;\n      // }\n\n      if (!visited.has(currentHexagon.toString())) {\n        visited.add(currentHexagon.toString());\n  \n        const neighbors = getNeighbors({hexagonPosition: {left: currentHexagon[0], top: currentHexagon[1]}});\n        \n        for (const neighbor of neighbors) {\n  \n          const neighborStr = neighbor.toString();\n          const isChampionOccupied = champions.some(c => c.hexagonPosition.left === neighbor[0] && c.hexagonPosition.top === neighbor[1]);\n  \n          if (!visited.has(neighborStr) && !isChampionOccupied) {\n          \n            // Check attack range\n            if (attackRange === 1) {\n              if (isAdjacent({ hexagonPosition: { left: currentHexagon[0], top: currentHexagon[1] } }, end)) {\n                return path;\n              }\n            }\n            if (attackRange === 2) {\n              if (isAdjacent({hexagonPosition: {left: neighbor[0], top: neighbor[1]}}, end)) {\n                return path;\n              }\n            } else if (attackRange === 3) {\n              const neighborNeighbors = getNeighbors({hexagonPosition: {left: neighbor[0], top: neighbor[1]}});\n              if (neighborNeighbors.some(n => isAdjacent({hexagonPosition: {left: n[0], top: n[1]}}, end))) {\n                return path; \n              }\n            } else if (attackRange === 4) {\n              const neighborNeighbors = getNeighbors({hexagonPosition: {left: neighbor[0], top: neighbor[1]}});\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({hexagonPosition: {left: n[0], top: n[1]}})); \n              }\n              if (neighborNeighborNeighbors.some(n => isAdjacent({hexagonPosition: {left: n[0], top: n[1]}}, end))) {\n                return path;\n              }\n            } else if (attackRange === 5) {\n              const neighborNeighbors = getNeighbors({hexagonPosition: {left: neighbor[0], top: neighbor[1]}});\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({hexagonPosition: {left: n[0], top: n[1]}}));\n              }\n              const neighborNeighborNeighborNeighbors = [];\n              for (const n of neighborNeighborNeighbors) {\n                neighborNeighborNeighborNeighbors.push(...getNeighbors({hexagonPosition: {left: n[0], top: n[1]}}));\n              }\n              if (neighborNeighborNeighborNeighbors.some(n => isAdjacent({hexagonPosition: {left: n[0], top: n[1]}}, end))) {\n                return path;\n              }\n            }\n  \n            const newPath = [...path, neighbor];\n            queue.push(newPath);\n          }\n        }\n      }\n    } else {\n      // if (isAdjacent(currentHexagon, end)) {\n      //   return path;\n      // }\n\n      if (!visited.has(currentHexagon.toString())) {\n        visited.add(currentHexagon.toString());\n  \n        const neighbors = getNeighbors(currentHexagon);\n        \n        for (const neighbor of neighbors) {\n  \n          const neighborStr = neighbor.toString();\n          const isChampionOccupied = champions.some(c => c.hexagonPosition.left === neighbor[0] && c.hexagonPosition.top === neighbor[1]);\n  \n          if (!visited.has(neighborStr) && !isChampionOccupied) {\n          \n            // Check attack range\n            if (attackRange === 1) {\n              if (isAdjacent(currentHexagon, end)) {\n                return path;\n              }\n            }\n            if (attackRange === 2) {\n              if (isAdjacent({hexagonPosition: {left: neighbor[0], top: neighbor[1]}}, end)) {\n                return path;\n              }\n            } else if (attackRange === 3) {\n              const neighborNeighbors = getNeighbors({hexagonPosition: {left: neighbor[0], top: neighbor[1]}});\n              if (neighborNeighbors.some(n => isAdjacent({hexagonPosition: {left: n[0], top: n[1]}}, end))) {\n                return path; \n              }\n            } else if (attackRange === 4) {\n              const neighborNeighbors = getNeighbors({hexagonPosition: {left: neighbor[0], top: neighbor[1]}});\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({hexagonPosition: {left: n[0], top: n[1]}})); \n              }\n              if (neighborNeighborNeighbors.some(n => isAdjacent({hexagonPosition: {left: n[0], top: n[1]}}, end))) {\n                return path;\n              }\n            } else if (attackRange === 5) {\n              const neighborNeighbors = getNeighbors({hexagonPosition: {left: neighbor[0], top: neighbor[1]}});\n              const neighborNeighborNeighbors = [];\n              for (const n of neighborNeighbors) {\n                neighborNeighborNeighbors.push(...getNeighbors({hexagonPosition: {left: n[0], top: n[1]}}));\n              }\n              const neighborNeighborNeighborNeighbors = [];\n              for (const n of neighborNeighborNeighbors) {\n                neighborNeighborNeighborNeighbors.push(...getNeighbors({hexagonPosition: {left: n[0], top: n[1]}}));\n              }\n              if (neighborNeighborNeighborNeighbors.some(n => isAdjacent({hexagonPosition: {left: n[0], top: n[1]}}, end))) {\n                return path;\n              }\n            }\n  \n            const newPath = [...path, neighbor];\n            queue.push(newPath);\n          }\n        }\n      }\n    }\n  }\n  return null;\n}\n\nfunction findClosestEnemy(userChampion, enemyChampions) {\n  let closestEnemy = null;\n  let minDistance = Infinity;\n\n  for (const enemyChampion of enemyChampions) {\n    const distance = findShortestPath(\n      enemyChampions,\n      { hexagonPosition: { left: userChampion.hexagonPosition.left, top: userChampion.hexagonPosition.top } },\n      { hexagonPosition: { left: enemyChampion.hexagonPosition.left, top: enemyChampion.hexagonPosition.top } },\n      userChampion.attackRange\n    );\n    if (distance && distance.length < minDistance) {\n      minDistance = distance.length;\n      closestEnemy = enemyChampion;\n    }\n  }\n\n  return closestEnemy;\n}\n\nfunction Board({ enemyChampionsList, userChampionsList, initialPuzzleNumber }) {\n  const [isDragging, setDragging] = useState(false);\n  const [enemyChampions, setEnemyChampions] = useState(enemyChampionsList);\n  const [userChampions, setUserChampions] = useState(userChampionsList);\n  const [draggedPlayer, setDraggedPlayer] = useState(null);\n  const [dragStartIndex, setDragStartIndex] = useState(null);\n  const [isCombatActive, setCombatActive] = useState(0);\n  const [selectedChampion, setSelectedChampion] = useState(userChampionsList[0]);\n  const [puzzleNumber, setPuzzleNumber] = useState(initialPuzzleNumber);\n  const [enemyChampionsArchive, setEnemyChampionsArchive] = useState(enemyChampionsList);\n  const [userChampionsArchive, setUserChampionsArchive] = useState(userChampionsList);\n  // const [combatIteration, setCombatIteration] = useState(0); // will implement later for overtime\n\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  const handleNextPuzzleClick = (e) => {\n    e.preventDefault();\n    setCombatActive(0);\n    let newPuzzleNumber;\n\n    do {\n      newPuzzleNumber = getRandomInt(puzzlesList.length);\n    } while (newPuzzleNumber === puzzleNumber);\n\n    // console.log('New Puzzle Number: ', puzzleNumber);\n\n    setPuzzleNumber(newPuzzleNumber);\n    const newChampions = Puzzles(newPuzzleNumber);\n    setEnemyChampions(newChampions[0]);\n    setUserChampions(newChampions[1]);\n    setSelectedChampion(newChampions[1][0]);\n  };\n\n  const startCombat = () => {\n    setCombatActive(1);\n  }\n\n  const endCombat = () => {\n    setCombatActive(2);\n    // console.log(\"combat ended\");\n  }\n\n  useEffect(() => {\n    if (isCombatActive === 1) {\n      const allChampions = userChampions.concat(enemyChampions);\n      // console.log('before champions', allChampions);\n  \n      const updateChampionAtIndex = async (index) => {\n        // Make sure that selected champion is actually found for purposes of champion display (when champion dies, stop displaying)\n        var selectedChampionFound = false;\n        if ((allChampions[index].team === selectedChampion.team) && (allChampions[index].index === selectedChampion.index)) {\n          selectedChampionFound = true;\n        }\n        \n        // Iterating through all stats after checking there are stats\n        var allChampionsStatIteration = 0;\n        const allStats = allChampions[index].stats;\n\n        if (allStats !== undefined && allStats !== null) {\n          for (const stat of allStats) {\n            // When the stat has no more iterations left, remove it from the list of stats\n            if (stat.iteration === 0) {\n              if (stat.type === 'dragonClaw') {\n                allChampions[index] = { ...allChampions[index], health: Math.round(allChampions[index].health + allChampions[index].originalHealth * 0.1) };\n                allChampions[index].stats[allChampionsStatIteration] = { ...stat, iteration: 2 * MOVEMENT_SPEED };\n                \n              } else if (stat.type === 'archangelStaff') {\n                allChampions[index] = { ...allChampions[index], abilityPower: allChampions[index].abilityPower + 30 };\n                allChampions[index].stats[allChampionsStatIteration] = { ...stat, iteration: 5 * MOVEMENT_SPEED };\n\n              } else {\n                // When stat has no iterations left, return back to base\n                if (stat.type === 'shred') {\n                  allChampions[index] = { ...allChampions[index], magicResist: allChampions[index].originalMagicResist };\n\n                } else if (stat.type === 'sunder') {\n                  allChampions[index] = { ...allChampions[index], armor: allChampions[index].originalArmor };\n\n                } else if (stat.type === 'shield') {\n                  // No clue how to get rid of each shield - tbd\n\n                } else if (stat.type === 'damageReduction') {\n                  allChampions[index] = { ...allChampions[index], damageReduction: allChampions[index].damageReduction - stat.value };\n\n                } else if (stat.type === 'damageExtra') {\n                  allChampions[index] = { ...allChampions[index], damageExtra: allChampions[index].damageExtra - stat.value };\n\n                } else if (stat.type === 'crownguard') {\n                  allChampions[index] = { ...allChampions[index], abilityPower: allChampions[index].abilityPower + 35 };\n\n                } else if (stat.type === 'guardbreaker') {\n                  allChampions[index] = { ...allChampions[index], damageExtra: allChampions[index].damageExtra - stat.value, appliedGuardbreaker: false };\n\n                } else {\n                  // Throw an error if the stat is not implemented yet\n                  throw new Error('This is a stat that is not implemented yet.');\n\n                }\n                const newStats = allChampions[index].stats.filter((_, index) => index !== allChampionsStatIteration);\n                allChampions[index] = { ...allChampions[index], stats: newStats };\n\n              }\n            } else {\n              // When stat still has iterations left, make sure that it is applied to the target stats\n              if (stat.type === 'shield') {\n                // Want to only apply each shield once\n                if (!stat.applied) {\n                  allChampions[index] = { ...allChampions[index], shield: Math.round(allChampions[index].originalHealth * stat.value) };\n                  allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true, iteration: stat.iteration - 1 };\n                  allChampionsStatIteration += 1;\n                }\n              } else if (stat.type === 'crownguard') {\n                if (!stat.applied) {\n                  allChampions[index] = { ...allChampions[index], shield: Math.round(allChampions[index].originalHealth * 0.3) };\n                  allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true }\n                }\n                console.log(allChampions[index].stats[allChampionsStatIteration]);\n                \n              } else if (stat.type === 'guardbreaker') {\n                if (!stat.applied) {\n                  allChampions[index] = { ...allChampions[index], damageExtra: allChampions[index].damageExtra + stat.value };\n                  allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true };\n                }\n                \n              } else if (stat.type === 'archangelStaff' || stat.type === 'dragonClaw') {\n                // Do nothing\n                \n              } else {\n                if (stat.type === 'shred') {\n                  allChampions[index] = { ...allChampions[index], magicResist: Math.round(allChampions[index].originalMagicResist*(1 - stat.value)) };\n  \n                } else if (stat.type === 'sunder') {\n                  allChampions[index] = { ...allChampions[index], armor: Math.round(allChampions[index].originalArmor*(1 - stat.value)) };\n  \n                } else {\n                  // Throw an error if the stat is not implemented yet\n                  throw new Error('This is a stat that is not implemented yet.');\n  \n                }\n              }\n\n              // else if (stat.type === 'damageReduction') {\n              //   if (!stat.applied) {\n              //     allChampions[index] = { ...allChampions[index], damageReduction: allChampions[index].damageReduction + stat.value };\n              //     allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true };\n              //   }\n\n              // } else if (stat.type === 'damageExtra') {\n              //   if (!stat.applied) {\n              //     allChampions[index] = { ...allChampions[index], damageExtra: allChampions[index].damageExtra + stat.value };\n              //     allChampions[index].stats[allChampionsStatIteration] = { ...stat, applied: true };\n              //   }\n\n              // } \n\n              // Remove one iteration for this stat and move onto next stat\n              allChampions[index].stats[allChampionsStatIteration] = { ...stat, iteration: stat.iteration - 1 }\n              allChampionsStatIteration += 1;\n              \n            }\n          }\n        }\n\n        // Iterating through all projectiles after checking there are projectiles\n        var allChampionsProjectileIteration = 0;\n        const allProjectiles = allChampions[index].projectiles;\n\n        if (allProjectiles !== undefined && allProjectiles !== null) {\n          for (const projectile of allProjectiles) {\n            if (projectile.iteration === 0) {\n              if (projectile.type === 'attack') {\n                // Calculate post-mitigation damage\n                const postMitigationAttackDamage = (1 - (allChampions[index].armor / (100 + allChampions[index].armor))) * projectile.damage * (1 - allChampions[index].damageReduction) * (1 + projectile.damageExtra);\n\n                // Check if there are oncePerCombat items to check with health thresholds\n                if (allChampions[index].oncePerCombat.length > 0) {\n                  // Check if this damage will activate any oncePerCombat items\n                  const thresholdHealth = Math.round(allChampions[index].oncePerCombat.health * allChampions[index].originalHealth);\n                  var updatedOncePerCombatAttack = [];\n\n                  // Iterate through each item that is once-per-combat\n                  for (const item of allChampions[index].oncePerCombat) {\n                    if (thresholdHealth <= postMitigationAttackDamage) {\n                      // Iterate through the different one-time stat boosts that can happen\n                      for (const statBoost of item.type) {\n                        if (statBoost.type === 'armor') {\n                          allChampions[index] = { ...allChampions[index], armor: allChampions[index].armor + statBoost.value };\n  \n                        } else if (statBoost.type === 'magicResist') {\n                          allChampions[index] = { ...allChampions[index], magicResist: allChampions[index].magicResist + statBoost.value };\n  \n                        } else if (statBoost.type === 'originalHealth') {\n                          allChampions[index] = { ...allChampions[index], originalHealth: allChampions[index].originalHealth + allChampions[index].originalHealth * statBoost.value, health: allChampions[index].health + allChampions[index].originalHealth * statBoost.value };\n  \n                        } else if (statBoost.type === 'attackDamage') {\n                          allChampions[index] = { ...allChampions[index], attackDamage: Math.round(allChampions[index].attackDamage + allChampions[index].attackDamage * statBoost.value) };\n  \n                        } else if (statBoost.type === 'shield') {\n                          allChampions[index] = { ...allChampions[index], stats: [ ...allChampions[index].stats, { type: 'shield', value: Math.round(statBoost.value * allChampions[index].originalHealth), iteration: 5 * MOVEMENT_SPEED, applied: true } ] }; // Movement speed temporary as placeholder for one second\n                          allChampions[index] = { ...allChampions[index], shield: allChampions[index].shield + Math.round(statBoost.value * allChampions[index].originalHealth) };\n  \n                        } else {\n                          // Throw an error if the type is not implemented yet (later for untargetable on banshee's veil)\n                          throw new Error('This is a type of once-per-combat item that is not implemented yet.');\n  \n                        }\n                      }\n                    } else {\n                      // Otherwise, if not activated, continue to keep in once-per-combat\n                      updatedOncePerCombatAttack = [ ...updatedOncePerCombatAttack, item ];\n\n                    }\n                  }\n                  \n                  allChampions[index] = { ...allChampions[index], updatedOncePerCombatAttack };\n\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAttackDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = { ...allChampions[index], alive: false, projectiles: newProjectiles };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    }\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAttackDamage} damage and died.`);\n                    break;\n\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAttackDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAttackDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAttackDamage);\n                      allChampions[index] = { ...allChampions[index], shield: newShield };\n\n                      // Account for guardbreaker\n                      if (projectile.attacker.team === 'user') {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = { ...allChampions[actualIndex], appliedGuardbreaker: true, stats: [ ...allChampions[actualIndex].stats, { type: 'guardbreaker', value: 0.25, iteration: 3 * MOVEMENT_SPEED }] };\n                        }\n                      } else {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = { ...allChampions[actualIndex], appliedGuardbreaker: true, stats: [ ...allChampions[actualIndex].stats, { type: 'guardbreaker', value: 0.25, iteration: 3 * MOVEMENT_SPEED }] };\n                        }\n                      }\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, (0.01 * projectile.damage) + (0.07 * postMitigationAttackDamage));\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement));\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          } \n                        }\n                      }\n                    }\n\n                    // Find any stat effects from projectile (from attacks)\n                    if (projectile.hasOwnProperty('effect')) {\n                      for (const effect of projectile.effect) {\n                        if (effect.type === 'lastWhisper') {\n                          if (allChampions[index].armor < allChampions[index].originalArmor) {\n                            if (allChampions[index].armor + Math.round(allChampions[index].originalArmor * 0.3) <= allChampions[index].originalArmor) {\n                              allChampions[index].stats = [ ...allChampions[index].stats, { type: 'sunder', value: 0.3, iteration: 3 * MOVEMENT_SPEED } ];\n                            }\n                          } else {\n                            allChampions[index].stats = [ ...allChampions[index].stats, { type: 'sunder', value: 0.3, iteration: 3 * MOVEMENT_SPEED } ];\n                          }\n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, projectiles: newProjectiles };\n\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, mana: newCurrentMana, projectiles: newProjectiles };\n\n                    } \n                  }\n                  \n                  allChampions[index] = { ...allChampions[index], oncePerCombat: [] };\n                } else {\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAttackDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = { ...allChampions[index], alive: false, projectiles: newProjectiles };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    }\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAttackDamage} damage and died.`);\n                    break;\n\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAttackDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAttackDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAttackDamage);\n                      allChampions[index] = { ...allChampions[index], shield: newShield };\n\n                      // Account for guardbreaker\n                      if (projectile.attacker.team === 'user') {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = { ...allChampions[actualIndex], appliedGuardbreaker: true, stats: [ ...allChampions[actualIndex].stats, { type: 'guardbreaker', value: 0.25, iteration: 3 * MOVEMENT_SPEED }] };\n                        }\n                      } else {\n                        const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                        if (allChampions[actualIndex].alive && allChampions[actualIndex].onShieldAttackProcItem && !allChampions[actualIndex].appliedGuardbreaker) {\n                          allChampions[actualIndex] = { ...allChampions[actualIndex], appliedGuardbreaker: true, stats: [ ...allChampions[actualIndex].stats, { type: 'guardbreaker', value: 0.25, iteration: 3 * MOVEMENT_SPEED }] };\n                        }\n                      }\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, (0.01 * projectile.damage) + (0.07 * postMitigationAttackDamage));\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement));\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAttackDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          } \n                        }\n                      }\n                    }\n\n                    // Find any stat effects from projectile (from attacks)\n                    if (projectile.hasOwnProperty('effect')) {\n                      for (const effect of projectile.effect) {\n                        if (effect.type === 'lastWhisper') {\n                          if (allChampions[index].armor < allChampions[index].originalArmor) {\n                            if (allChampions[index].armor + Math.round(allChampions[index].originalArmor * 0.3) <= allChampions[index].originalArmor) {\n                              allChampions[index].stats = [ ...allChampions[index].stats, { type: 'sunder', value: 0.3, iteration: 3 * MOVEMENT_SPEED } ];\n                            }\n                          } else {\n                            allChampions[index].stats = [ ...allChampions[index].stats, { type: 'sunder', value: 0.3, iteration: 3 * MOVEMENT_SPEED } ];\n                          }\n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, projectiles: newProjectiles };\n\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, mana: newCurrentMana, projectiles: newProjectiles };\n\n                    } \n                  }\n                }\n              } else if (projectile.type === 'ability') {\n                // Calculate post-mitigation damage\n                const postMitigationAbilityDamage = (1 - (allChampions[index].magicResist / (100 + allChampions[index].magicResist))) * projectile.damage * (1 - allChampions[index].damageReduction) * (1 + projectile.damageExtra);\n\n                // Check if there are oncePerCombat items to check with health thresholds\n                if (allChampions[index].oncePerCombat.length > 0) {\n                  // Check if this damage will activate any oncePerCombat items\n                  const thresholdHealth = Math.round(allChampions[index].oncePerCombat.health * allChampions[index].originalHealth);\n                  var updatedOncePerCombatAbility = [];\n\n                  // Iterate through each item that is once-per-combat\n                  for (const item of allChampions[index].oncePerCombat) {\n                    if (thresholdHealth <= postMitigationAbilityDamage) {\n                      // Iterate through the different one-time stat boosts that can happen\n                      for (const statBoost of item.type) {\n                        if (statBoost.type === 'armor') {\n                          allChampions[index] = { ...allChampions[index], armor: allChampions[index].armor + statBoost.value };\n  \n                        } else if (statBoost.type === 'magicResist') {\n                          allChampions[index] = { ...allChampions[index], magicResist: allChampions[index].magicResist + statBoost.value };\n  \n                        } else if (statBoost.type === 'maxHealth') {\n                          allChampions[index] = { ...allChampions[index], originalHealth: allChampions[index].originalHealth + statBoost.value, health: allChampions[index].health + statBoost.value };\n  \n                        } else if (statBoost.type === 'attackDamage') {\n                          allChampions[index] = { ...allChampions[index], attackDamage: Math.round(allChampions[index].attackDamage + allChampions[index].attackDamage * statBoost.value) };\n  \n                        } else if (statBoost.type === 'shield') {\n                          allChampions[index] = { ...allChampions[index], stats: [ ...allChampions[index].stats, { type: 'shield', value: Math.round(statBoost.value * allChampions[index].originalHealth), iteration: 5 * MOVEMENT_SPEED, applied: true } ] }; // Movement speed temporary as placeholder for one second\n                          allChampions[index] = { ...allChampions[index], shield: allChampions[index].shield + Math.round(statBoost.value * allChampions[index].originalHealth) };\n  \n                        } else {\n                          // Throw an error if the type is not implemented yet (later for untargetable on banshee's veil)\n                          throw new Error('This is a type of once-per-combat item that is not implemented yet.');\n  \n                        }\n                      }\n                    } else {\n                      // Otherwise, if not activated, continue to keep in once-per-combat\n                      updatedOncePerCombatAbility = [ ...updatedOncePerCombatAbility, item ];\n\n                    }\n                  }\n                  \n                  allChampions[index] = { ...allChampions[index], updatedOncePerCombatAbility };\n\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAbilityDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = { ...allChampions[index], alive: false, projectiles: newProjectiles };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    }\n\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAbilityDamage} damage and died.`);\n                    break;\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAbilityDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAbilityDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAbilityDamage);\n                      allChampions[index] = { ...allChampions[index], shield: newShield };\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, (0.01 * projectile.damage) + (0.07 * postMitigationAbilityDamage));\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement))\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          } \n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, projectiles: newProjectiles };\n\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, mana: newCurrentMana, projectiles: newProjectiles };\n\n                    } \n                  }\n                  \n                  allChampions[index] = { ...allChampions[index], oncePerCombat: [] };\n                } else {\n                  // Check if the damage will kill the champion or not\n                  if (allChampions[index].health + allChampions[index].shield <= postMitigationAbilityDamage) {\n                    const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                    allChampions[index] = { ...allChampions[index], alive: false, projectiles: newProjectiles };\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        allChampions[actualIndex] = { ...allChampions[actualIndex], health: allChampions[actualIndex].health + Math.round(allChampions[actualIndex].omnivamp * (allChampions[index].health - allChampions[index].shield)) };\n                      }\n                    }\n\n                    // console.log(`${allChampions[index].type} of ${allChampions[index].team} took ${postMitigationAbilityDamage} damage and died.`);\n                    break;\n                  } else {\n                    // Check if the champion has a shield\n                    var shieldDifference = postMitigationAbilityDamage;\n                    if (allChampions[index].shield > 0) {\n                      shieldDifference = Math.max(postMitigationAbilityDamage - allChampions[index].shield, 0);\n                      const newShield = Math.max(0, allChampions[index].shield - postMitigationAbilityDamage);\n                      allChampions[index] = { ...allChampions[index], shield: newShield };\n                    }\n\n                    // Find new mana and health for champion\n                    var newHealth = allChampions[index].health - shieldDifference;\n                    const manaIncrement = Math.min(42.5, (0.01 * projectile.damage) + (0.07 * postMitigationAbilityDamage));\n                    const newCurrentMana = Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + manaIncrement))\n\n                    // Account for omnivamp\n                    if (projectile.attacker.team === 'user') {\n                      const actualIndex = userChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    } else {\n                      const actualIndex = enemyChampionsArchive[projectile.attacker.specialIndex].index;\n                      if (allChampions[actualIndex].alive) {\n                        newHealth = newHealth + Math.round(allChampions[actualIndex].omnivamp * postMitigationAbilityDamage);\n                      }\n                    }\n\n                    // Check for any constant threshold changes\n                    if (allChampions[index].constantThreshold.length > 0) {\n                      for (const item of allChampions[index].constantThreshold) {\n                        if (item.type === 'steadfastHeart') {\n                          if (newHealth * 2 <= allChampions[index].originalHealth && item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.15 + 0.08;\n                            item.baseState = false;\n                          } else if (newHealth * 2 >= allChampions[index].originalHealth && !item.baseState) {\n                            allChampions[index].damageReduction = allChampions[index].damageReduction - 0.08 + 0.15;\n                            item.baseState = true;\n                          } \n                        }\n                      }\n                    }\n\n                    // Set projectiles to exclude this one\n                    if (allChampions[index].totalMana === 0) {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, projectiles: newProjectiles };\n\n                    } else {\n                      const newProjectiles = allChampions[index].projectiles.filter((_, index) => index !== allChampionsProjectileIteration);\n                      allChampions[index] = { ...allChampions[index], health: newHealth, mana: newCurrentMana, projectiles: newProjectiles };\n\n                    } \n                  }\n                  \n                  allChampions[index] = { ...allChampions[index], oncePerCombat: [] };\n                }\n              } else if (projectile.type === 'item') {\n                // Throw an error if the projectile is not implemented yet (later for statik shiv, runaan's, etc.)\n                throw new Error('This is a projectile that is not implemented yet.');\n\n              } else {\n                // Throw an error if the projectile is not implemented yet\n                throw new Error('This is a projectile that is not implemented yet.');\n\n              }\n            } else {\n              // Remove one iteration for this projectile and move on to next projectile\n              allChampions[index].projectiles[allChampionsProjectileIteration] = { ...projectile, iteration: projectile.iteration - 1 };\n              allChampionsProjectileIteration += 1;\n\n            }\n          }\n        }\n\n        // Check for the champion being alive\n        if (allChampions[index].alive) {\n          // Find the closest enemy/user to the champion\n          const isUserChampion = allChampions[index].team === 'user';\n          const closestEnemy = isUserChampion ? findClosestEnemy(allChampions[index], enemyChampions) : findClosestEnemy(allChampions[index], userChampions);\n    \n          // Check if a closest enemy exists\n          if (closestEnemy) {\n            const shortestPath = findShortestPath(allChampions, allChampions[index], closestEnemy, allChampions[index].attackRange);\n            // console.log('shortest path', shortestPath);\n    \n            // Check if a shortest path exists\n            if (shortestPath && shortestPath.length > 1) {\n              const targetHexagon = shortestPath[1];\n              const targetPixelLeft = convertToPixels(targetHexagon[0], 'left', targetHexagon[1] % 2 === 1) - 25;\n              const targetPixelTop = convertToPixels(targetHexagon[1], 'top', targetHexagon[1] % 2 === 1) - 25;\n    \n              // See if you need to move to get to the nearest enemy/user\n              if (allChampions[index].iterationsRemaining.move === 0) {\n                const newIterationsRemaining = { ...allChampions[index].iterationsRemaining, move: allChampions[index].movementSpeed };\n                allChampions[index] = {\n                  ...allChampions[index],\n                  hexagonPosition: { left: targetHexagon[0], top: targetHexagon[1] },\n                  currentPosition: { left: targetPixelLeft, top: targetPixelTop },\n                  iterationsRemaining: newIterationsRemaining, \n                };\n                // console.log(`${allChampions[index].type} of ${allChampions[index].team} moved.`);\n\n              } else {\n                const newIterationsRemaining = { ...allChampions[index].iterationsRemaining, move: allChampions[index].iterationsRemaining.move - 1 };\n                allChampions[index] = {\n                  ...allChampions[index],\n                  iterationsRemaining: newIterationsRemaining, \n                };\n\n              }\n    \n              // console.log('updated champion', allChampions[index]);\n            } else {\n              // Check if not at casting an ability yet\n              if (allChampions[index].totalMana === 0 | allChampions[index].mana < allChampions[index].totalMana) {\n                // If ready to cast an ability next\n                if (allChampions[index].iterationsRemaining.attack === 0) {\n                  // Check for based-on-target item enhancements\n                  var additionalAttackDamage = 0;\n                  if (allChampions[index].basedOnTarget.length > 0) {\n                    for (const item of allChampions[index].basedOnTarget) {\n                      if (item.type === 'giantSlayer') {\n                        if (closestEnemy.originalHealth > 1600) {\n                          additionalAttackDamage = 0.25;\n\n                        }\n                      }\n                    }\n                  }\n\n                  // Check for critical chance\n                  const randomValue = Math.random();\n                  var attackCriticalDamage = 0;\n                  if (randomValue < allChampions[index].criticalChance) {\n                    attackCriticalDamage = allChampions[index].criticalDamage;\n                  }\n\n                  // Check to apply status effect on attack hit\n                  var newProjectile = { type: 'attack', damage: allChampions[index].attackDamage + allChampions[index].attackDamage * attackCriticalDamage, damageExtra: allChampions[index].damageExtra + additionalAttackDamage, iteration: allChampions[index].attackProjectileSpeed, \n                    attacker: { specialIndex: allChampions[index].specialIndex, team: allChampions[index].specialIndex }, effect: [] };\n                  if (allChampions[index].statusEffectOnAttack.length > 0) {\n                    for (const item of allChampions[index].statusEffectOnAttack) {\n                      if (item.type === 'lastWhisper') {\n                        newProjectile = { ...newProjectile, effect: [ ...newProjectile.effect, item ] };\n                      } else {\n                        throw new Error('This type of on-attack hit item status is not yet implemented.');\n                      }\n                    }\n                  }\n                  const newProjectileList = [ ...closestEnemy.projectiles, newProjectile ];\n                  allChampions[closestEnemy.index] = { ...closestEnemy, projectiles: newProjectileList };\n\n                  // Check if there needs to be changes due to on-attack items\n                  if (allChampions[index].onAttackAbility.length > 0) {\n                    for (const item of allChampions[index].onAttackAbility) {\n                      if (item.type === 'mana') {\n                        allChampions[index] = { ...allChampions[index], mana: Math.min(allChampions[index].totalMana, Math.round(allChampions[index].mana + item.value)) };\n\n                      } else if (item.type === 'attackSpeed') {\n                        allChampions[index] = { ...allChampions[index], attackSpeed: Math.round(allChampions[index].attackSpeed - allChampions[index].attackSpeed * item.value) };\n\n                      } else {\n                        // Throw an error if the projectile is not implemented yet\n                        throw new Error('This type of on-attack item is not implemented yet.');\n\n                      }\n                    }\n                  }\n\n                  const newCurrentMana = Math.min(allChampions[index].totalMana, allChampions[index].mana + 10);\n                  const newIterationsRemaining = { ...allChampions[index].iterationsRemaining, attack: allChampions[index].attackSpeed };\n                  allChampions[index] = { ...allChampions[index], mana: newCurrentMana, iterationsRemaining: newIterationsRemaining };\n                  // console.log(`${allChampions[index].type} of ${allChampions[index].team} fired an attack to ${closestEnemy.type}.`);\n\n                } else {\n                  // Reduce iterations until casting next attack by 1\n                  const newIterationsRemaining = { ...allChampions[index].iterationsRemaining, attack: allChampions[index].iterationsRemaining.attack - 1 };\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    iterationsRemaining: newIterationsRemaining, \n                  };\n\n                }\n              } else if (allChampions[index].mana >= allChampions[index].totalMana) {\n                // Check if ready to cast an ability\n                if (allChampions[index].iterationsRemaining.ability === 0) {\n                  // Check for based-on-target item enhancements\n                  var additionalAbilityDamage = 0;\n                  if (allChampions[index].basedOnTarget.length > 0) {\n                    for (const item of allChampions[index].basedOnTarget) {\n                      if (item.type === 'giantSlayer') {\n                        if (closestEnemy.originalHealth > 1600) {\n                          additionalAbilityDamage = 0.25;\n\n                        }\n                      }\n                    }\n                  }\n\n                  // Check for critical chance on abilities\n                  const randomValue = Math.random();\n                  var abilityCriticalDamage = 0;\n                  if (randomValue < allChampions[index].criticalChance && allChampions[index].abilityCrit) {\n                    abilityCriticalDamage = allChampions[index].criticalDamage;\n                  }\n\n                  const newProjectile = { type: 'ability', damage: allChampions[index].abilityPower + allChampions[index].abilityPower * abilityCriticalDamage, damageExtra: allChampions[index].damageExtra + additionalAbilityDamage, iteration: allChampions[index].abilityProjectileSpeed,\n                    attacker: { specialIndex: allChampions[index].specialIndex, team: allChampions[index].specialIndex }, effect: [] };\n                  const newProjectileList = [ ...closestEnemy.projectiles, newProjectile ];\n                  allChampions[closestEnemy.index] = { ...closestEnemy, projectiles: newProjectileList };\n\n                  const newIterationsRemaining = { ...allChampions[index].iterationsRemaining, ability: allChampions[index].abilityCastTime };\n                  allChampions[index] = { ...allChampions[index], mana: 0, iterationsRemaining: newIterationsRemaining };\n                  // console.log(`${allChampions[index].type} of ${allChampions[index].team} fired an ability to ${closestEnemy.type}.`);\n\n                } else {  \n                  // Reduce iterations until casting next ability by 1\n                  const newIterationsRemaining = { ...allChampions[index].iterationsRemaining, ability: allChampions[index].iterationsRemaining.ability - 1 };\n                  allChampions[index] = {\n                    ...allChampions[index],\n                    iterationsRemaining: newIterationsRemaining, \n                  };\n\n                }\n              }\n            }\n          }\n        }\n\n        return selectedChampionFound && allChampions[index].alive;\n      };\n  \n      const updateChampionsSequentially = async (startTime) => {\n        var selectedChampionCompleted = false;\n\n        for (let index = 0; index < allChampions.length; index++) {\n          const selectedChampionFound = await updateChampionAtIndex(index);\n          if (selectedChampionFound) {\n            setSelectedChampion(allChampions[index]);\n            selectedChampionCompleted = true;\n          }\n        }\n        \n        // console.log('after champions', allChampions);\n\n        var userChampionsArchive = [];\n        var enemyChampionsArchive = [];\n\n        allChampions.forEach(champion => {\n          if (champion.team === 'user') {\n            userChampionsArchive.push(champion);\n          } else {\n            enemyChampionsArchive.push(champion);\n          }\n        })\n\n        const aliveChampions = allChampions.filter(x => x.alive); \n\n        var updatedUserChampions = [];\n        var updatedEnemyChampions = [];\n        var iteration = 0;\n\n        aliveChampions.forEach(champion => {\n          if (champion.team === 'user') {\n            champion = {\n              ...champion, index: iteration\n            };\n            updatedUserChampions.push(champion);\n            userChampionsArchive[champion.specialIndex] = champion;\n            if (!selectedChampionCompleted) {\n              setSelectedChampion(champion);\n              selectedChampionCompleted = true;\n            }\n          } else {\n            champion = {\n              ...champion, index: iteration\n            };\n            updatedEnemyChampions.push(champion);\n            enemyChampionsArchive[champion.specialIndex] = champion;\n            if (!selectedChampionCompleted) {\n              setSelectedChampion(champion);\n              selectedChampionCompleted = true;\n            }\n          }\n          iteration += 1;\n        });\n        \n        const endTime = new Date();\n        const timeDifference = endTime - startTime;\n        const waitTime = ITERATION_CYCLE - timeDifference;\n        if (waitTime >= 0) {\n          await new Promise(resolve => setTimeout(resolve, waitTime));    \n          // console.log(`${globalIteration} Complete w/ ${waitTime + timeDifference} ms.`);\n        } else {\n          console.log('ERROR! ITERATION CYCLE TIME NOT LONG ENOUGH!');\n        }\n\n        setUserChampions(updatedUserChampions);\n        setEnemyChampions(updatedEnemyChampions);\n        setUserChampionsArchive(userChampionsArchive);\n        setEnemyChampionsArchive(enemyChampionsArchive);\n\n        if (updatedUserChampions.length === 0) {\n          endCombat();\n        } else if (updatedEnemyChampions.length === 0) {\n          endCombat();\n        }\n      };\n      \n      const startTime = new Date();\n      updateChampionsSequentially(startTime);\n      globalIteration += 1;\n    }\n  }, [userChampions, isCombatActive, enemyChampions]);\n\n  const areChampionsOverlapping = (champion1, champion2) => {\n    const dx = champion1.currentPosition.left - champion2.currentPosition.left;\n    const dy = champion1.currentPosition.top - champion2.currentPosition.top;\n    const distance = Math.sqrt(dx * dx + dy * dy);\n    return distance < CIRCLE_DIAMETER; \n  };\n\n  const handleCircleDragStart = (event, player, index) => {\n    if (player === 'enemy') {\n      event.preventDefault(); // prevent dragging for enemy circles\n      return;\n    }\n\n    event.dataTransfer.setData('text/plain', 'champion'); \n    setDragging(true);\n    setDraggedPlayer(player);\n    setDragStartIndex(index);\n  };\n\n  const handleCircleDragEnd = () => {\n    setDragging(false);\n    setDraggedPlayer(null);\n    setDragStartIndex(null);\n  };\n\n  const handleDragOver = (event) => {\n    event.dataTransfer.effectAllowed = 'none';\n    event.preventDefault();\n  };\n\n  const convertToPixels = (coordinate, leftOrTop, even) => {\n    if (leftOrTop === 'left') {\n      if (even) {\n        return 459.75 + 32.7 + ((coordinate + 1) * 2.95) + (coordinate * 62.4) + 62.4 / 2;\n      }\n      return 459.75 + ((coordinate + 1) * 2.95) + (coordinate * 62.4) + 62.4 / 2;\n    }\n    if (leftOrTop === 'top') {\n      return (coordinate * 20.3) + (coordinate * 36) + 36 + 158.11;\n    }\n  }\n\n  const convertToHexagons = (coordinate, leftOrTop, even) => {\n    if (leftOrTop === 'left') {\n      if (even) {\n        return Math.floor((coordinate - 32.7 - 459.75 - 2.95 - 31.2) / (2.95 + 62.4));\n      }\n      return Math.floor((coordinate - 2.95 - 31.2 - 459.75) / (2.95 + 62.4));\n    }\n    if (leftOrTop === 'top') {\n      return Math.floor((coordinate - 36 - 158.11) / (20.3 + 36));\n    }\n  }\n\n  const handleDrop = (event, hexagonCoordinates, player) => {\n    event.preventDefault();\n\n    if (draggedPlayer === 'enemy') {\n      return;\n    }\n    if (isCombatActive !== 0) {\n      event.preventDefault();\n      return;\n    }\n    if (player === 'user' && dragStartIndex !== null) {\n      const hexagonCenterX = convertToPixels(hexagonCoordinates.left, 'left', hexagonCoordinates.top % 2 === 1);\n      const hexagonCenterY = convertToPixels(hexagonCoordinates.top, 'top', hexagonCoordinates.top % 2 === 1);\n\n      const targetHexagon = {\n        currentPosition: {\n          left: hexagonCenterX - (CIRCLE_DIAMETER / 2),\n          top: hexagonCenterY - (CIRCLE_DIAMETER / 2)\n        }\n      };\n\n      const overlappingIndex = userChampions.findIndex(\n        (champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetHexagon)\n      );\n\n      const enemyOverlappingIndex = enemyChampions.findIndex(\n        (champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetHexagon)\n      );\n\n      if (enemyOverlappingIndex === -1) {\n        if (overlappingIndex !== -1) {\n          setUserChampions((prevUserChampions) => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[overlappingIndex] = {\n              ...prevUserChampions[overlappingIndex], \n              hexagonPosition: { left: prevUserChampions[dragStartIndex].hexagonPosition.left, top: prevUserChampions[dragStartIndex].hexagonPosition.top },\n              currentPosition: { left: prevUserChampions[dragStartIndex].currentPosition.left, top: prevUserChampions[dragStartIndex].currentPosition.top }\n            };\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: { left: hexagonCoordinates.left, top: hexagonCoordinates.top },\n              currentPosition: { left: targetHexagon.currentPosition.left, top: targetHexagon.currentPosition.top }\n            };\n            return updatedUserChampions;\n          });\n        } else {\n          setUserChampions((prevUserChampions) => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: { left: hexagonCoordinates.left, top: hexagonCoordinates.top },\n              currentPosition: { left: targetHexagon.currentPosition.left, top: targetHexagon.currentPosition.top },\n              image: updatedUserChampions[dragStartIndex].image\n            };\n            return updatedUserChampions;\n          });\n        }\n      }\n    }\n  };\n\n  const handleCircleDrop = (event, circleCoordinates, index) => {\n    event.preventDefault();\n\n    if (draggedPlayer === 'enemy') {\n      return;\n    }\n    if (isCombatActive !== 0) {\n      event.preventDefault();\n      return;\n    }\n    if (circleCoordinates.top >= 398.31 && dragStartIndex !== null) {\n      const targetChampion = {\n        currentPosition: {\n          left: circleCoordinates.left,\n          top: circleCoordinates.top\n        }\n      };\n\n      const overlappingIndex = userChampions.findIndex(\n        (champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetChampion)\n      );\n\n      const enemyOverlappingIndex = enemyChampions.findIndex(\n        (champion, index) => index !== dragStartIndex && areChampionsOverlapping(champion, targetChampion)\n      );\n\n      if (enemyOverlappingIndex === -1) {\n        if (overlappingIndex !== -1) {\n          setUserChampions((prevUserChampions) => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[overlappingIndex] = {\n              ...prevUserChampions[overlappingIndex], \n              hexagonPosition: { left: prevUserChampions[dragStartIndex].hexagonPosition.left, top: prevUserChampions[dragStartIndex].hexagonPosition.top },\n              currentPosition: { left: prevUserChampions[dragStartIndex].currentPosition.left, top: prevUserChampions[dragStartIndex].currentPosition.top }\n            };\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: { left: prevUserChampions[index].hexagonPosition.left, top: prevUserChampions[index].hexagonPosition.top },\n              currentPosition: { left: targetChampion.currentPosition.left, top: targetChampion.currentPosition.top }\n            };\n            return updatedUserChampions;\n          });\n        } else {\n          setUserChampions((prevUserChampions) => {\n            const updatedUserChampions = [...prevUserChampions];\n            updatedUserChampions[dragStartIndex] = {\n              ...prevUserChampions[dragStartIndex],\n              hexagonPosition: { left: prevUserChampions[index].hexagonPosition.left, top: prevUserChampions[index].hexagonPosition.top },\n              currentPosition: { left: targetChampion.currentPosition.left, top: targetChampion.currentPosition.top },\n              image: updatedUserChampions[dragStartIndex].image\n            };\n            return updatedUserChampions;\n          });\n        }\n      }\n    }\n  };\n\n  return (\n    <div style={{ display: 'flex', flexDirection: 'column', height: '90vh', width: '100vw', backgroundColor: '#13293D', alignItems: 'center', justifyContent: 'center' }}>\n      <div style={{ display: 'flex', flexDirection: 'row', width: '100%', height: '95%' }}>\n        <div className='section left-section'>\n          <DualButton />\n          <div style={{ flex: 1, display: 'flex', flexDirection: 'column', justifyContent: 'center' }}>\n            <Traits />\n          </div>\n          <Augments />\n        </div>\n        <div className='section center-section'>\n          {isCombatActive === 2 && (\n            <div className=\"overlay\">\n              {userChampions.length > 0 && (\n                <div className=\"result-message win\">\n                  You Win!\n                </div>\n              )}\n              {enemyChampions.length > 0 && (\n                <div className=\"result-message lose\">\n                  You Lose!\n                </div>\n              )}\n            </div>\n          )}\n          <div className='hex-row'>\n            {enemyChampions.map((champion, index) => (\n              <div\n                key={index}\n                className={`circle-overlay ${isDragging && draggedPlayer === 'enemy' ? 'dragging' : ''}`}\n                style={{ left: champion.currentPosition.left + 'px', top: champion.currentPosition.top + 'px' }}\n                draggable\n                onDragStart={(e) => handleCircleDragStart(e, 'enemy', index)}\n                onDragEnd={handleCircleDragEnd}\n                onDragOver={(e) => handleDragOver(e)}\n                onDrop={(e) => handleCircleDrop(e, { left: champion.currentPosition.left, top: champion.currentPosition.top }, index)}\n                onClick={() => setSelectedChampion(champion)}\n              >\n                <Champion\n                  key={index}\n                  team={'enemy'}\n                  index={champion.index}\n                  hexagonPosition={champion.hexagonPosition}\n                  currentPosition={champion.currentPosition}\n                  image={champion.image}\n                  type={champion.type}\n                  starLevel={champion.starLevel}\n                  headliner={champion.headliner}\n                  items={champion.items}\n                  alive={champion.alive}\n                  attackRange={champion.attackRange}\n                  health={champion.health}\n                  originalHealth={champion.originalHealth}\n                  attackDamage={champion.attackDamage}\n                  totalMana={champion.totalMana}\n                  mana={champion.mana}\n                  abilityPower={champion.abilityPower}\n                  armor={champion.armor}\n                  magicResist={champion.magicResist}\n                  castingAttack={champion.castingAttack}\n                  castingAbility={champion.castingAbility}\n                  projectiles={champion.projectiles}\n                  abilityCastTime={champion.abilityCastTime}\n                  movementSpeed={champion.movementSpeed}\n                  iterationsRemaining={champion.iterationsRemaining}\n                  attackProjectileSpeed={champion.attackProjectileSpeed}\n                  abilityProjectileSpeed={champion.abilityProjectileSpeed}\n                ></Champion>\n              </div>\n            ))}\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 0, top: 0, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 1, top: 0, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 2, top: 0, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 3, top: 0, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 4, top: 0, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 5, top: 0, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 0, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 6, top: 0, even: 0 }}/>\n          </div>\n          <div className='hex-row even'>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 0, top: 1, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 1, top: 1, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 2, top: 1, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 3, top: 1, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 4, top: 1, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 5, top: 1, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 1, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 6, top: 1, even: 32.7 }}/>\n          </div>\n          <div className='hex-row'> \n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 0, top: 2, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 1, top: 2, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 2, top: 2, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 3, top: 2, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 4, top: 2, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 5, top: 2, even: 0 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 2, even: 0 }, 'enemy')} hexagonCoordinates={{ left: 6, top: 2, even: 0 }}/>\n          </div>\n          <div className='hex-row even'>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 0, top: 3, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 1, top: 3, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 2, top: 3, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 3, top: 3, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 4, top: 3, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 5, top: 3, even: 32.7 }}/>\n            <Hexagon player='enemy' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 3, even: 32.7 }, 'enemy')} hexagonCoordinates={{ left: 6, top: 3, even: 32.7 }}/>\n          </div>\n          <div className='hex-row'>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 0, top: 4, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 1, top: 4, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 2, top: 4, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 3, top: 4, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 4, top: 4, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 5, top: 4, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 4, even: 0 }, 'user')} hexagonCoordinates={{ left: 6, top: 4, even: 0 }}/>\n          </div>\n          <div className='hex-row even'>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 0, top: 5, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 1, top: 5, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 2, top: 5, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 3, top: 5, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 4, top: 5, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 5, top: 5, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 5, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 6, top: 5, even: 32.7 }}/>\n          </div>\n          <div className='hex-row'>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 0, top: 6, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 1, top: 6, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 2, top: 6, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 3, top: 6, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 4, top: 6, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 5, top: 6, even: 0 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 6, even: 0 }, 'user')} hexagonCoordinates={{ left: 6, top: 6, even: 0 }}/>\n          </div>\n          <div className='hex-row even'>\n            {userChampions.map((champion, index) => (\n              <div\n                key={index}\n                className={`circle-overlay ${isDragging && draggedPlayer === 'user' ? 'dragging' : ''}`}\n                style={{ left: champion.currentPosition.left + 'px', top: champion.currentPosition.top + 'px' }}\n                draggable\n                onDragStart={(e) => handleCircleDragStart(e, 'user', index)}\n                onDragEnd={handleCircleDragEnd}\n                onDragOver={(e) => handleDragOver(e)}\n                onDrop={(e) => handleCircleDrop(e, { left: champion.currentPosition.left, top: champion.currentPosition.top }, index)}\n                onClick={() => setSelectedChampion(champion)}\n              >\n                <Champion\n                  key={index}\n                  team={'user'}\n                  index={champion.index}\n                  hexagonPosition={champion.hexagonPosition}\n                  currentPosition={champion.currentPosition}\n                  image={champion.image}\n                  type={champion.type}\n                  starLevel={champion.starLevel}\n                  headliner={champion.headliner}\n                  items={champion.items}\n                  alive={champion.alive}\n                  attackRange={champion.attackRange}\n                  health={champion.health}\n                  originalHealth={champion.originalHealth}\n                  attackDamage={champion.attackDamage}\n                  totalMana={champion.totalMana}\n                  mana={champion.mana}\n                  abilityPower={champion.abilityPower}\n                  armor={champion.armor}\n                  magicResist={champion.magicResist}\n                  castingAttack={champion.castingAttack}\n                  castingAbility={champion.castingAbility}\n                  projectiles={champion.projectiles}\n                  abilityCastTime={champion.abilityCastTime}\n                  movementSpeed={champion.movementSpeed}\n                  iterationsRemaining={champion.iterationsRemaining}\n                  attackProjectileSpeed={champion.attackProjectileSpeed}\n                  abilityProjectileSpeed={champion.abilityProjectileSpeed}\n                ></Champion>\n              </div>\n            ))}\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 0, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 0, top: 7, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 1, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 1, top: 7, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 2, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 2, top: 7, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 3, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 3, top: 7, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 4, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 4, top: 7, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 5, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 5, top: 7, even: 32.7 }}/>\n            <Hexagon player='user' onDragOver={handleDragOver} onDrop={(e) => handleDrop(e, { left: 6, top: 7, even: 32.7 }, 'user')} hexagonCoordinates={{ left: 6, top: 7, even: 32.7 }}/>\n          </div>\n        </div>\n        <div className='section right-section'>\n          <ChampionDisplay champion={selectedChampion} />\n          <div style={{ display: 'flex', width: '225px', height: '50px', marginBottom: '10px' }}>\n            {isCombatActive !== 2 && (\n              <button\n                style={{\n                  flex: '1',\n                  padding: '10px',\n                  borderRadius: '15px',\n                  backgroundColor: isCombatActive !== 0 ? '#ccc' : '#4CAF50',\n                  color: '#ffffff',\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                }}\n                disabled={isCombatActive !== 0}\n                onClick={startCombat}\n              >\n                Submit\n              </button>\n            )}\n            {isCombatActive === 2 && (\n              <button\n                style={{\n                  flex: '1',\n                  padding: '10px',\n                  borderRadius: '15px',\n                  backgroundColor: '#4CAF50',  \n                  color: '#ffffff',\n                  fontSize: '16px',\n                  fontWeight: 'bold',\n                }}\n                disabled={isCombatActive === 1}\n                onClick={handleNextPuzzleClick}\n              >\n                Next Puzzle\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n      <div style={{ width: '100%', height: '5%' }} />\n    </div>\n  );\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,aAAa;AACpB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,WAAW,EAAEC,OAAO,QAAQ,WAAW;AAChD,SAASC,cAAc,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,eAAe,GAAG,EAAE;AAC1B,MAAMC,eAAe,GAAG,EAAE;AAC1B,IAAIC,eAAe,GAAG,CAAC;AAEvB,MAAMC,gBAAgB,GAAG;EACvB,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnB,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EAC5B,CAAC;EACD,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC;EACD,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC;EACD,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC;EACD,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC;EACD,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;EACpC,CAAC;EACD,CAAC,EAAE;IACD,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}